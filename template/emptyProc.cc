  /// \file myProc.cc
/*
 *
 * ShowerSplitterProcessor.cc source template generated by fclass
 * Creation date : jeu. mai 9 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "myProc.hh"


myProc amyProc;


using namespace std;
using namespace baboon;

myProc::myProc()
	: marlin::Processor("myProc") {

	  _description = "myProc example processor with baboon libraries";

	  // register steering parameters: name, description, class-variable, default value

	  registerProcessorParameter( "BABOON_HOME" ,
				      "Path to Baboon directory install",
				      baboonHome,
				      string("/home/remi/ilcsoft/SDHCAL/Baboon") );

	  string cfgFileName = string("/home/remi/ilcsoft/SDHCAL/Baboon/config/SDHCAL.cfg");
	  registerProcessorParameter("SDHCAL_cfg" ,
				     "SDHCAL configurations" ,
				     configFileName,
				     cfgFileName);

	  string algoFileName = string("/home/remi/ilcsoft/SDHCAL/Baboon/config/Algorithm.cfg");
	  registerProcessorParameter("Algorithm_cfg" ,
				     "Algorithm configurations" ,
				     algorithmFileName,
				     algoFileName);

	  registerProcessorParameter("rootOutputFile" ,
				     "root outputfile" ,
				     rootOutputFile,
				     string("ShowerSplitter.root"));

	  registerProcessorParameter("decoderString" ,
				     "decoder string for cell ID decoder" ,
				     decoderString,
				     string("M:3,S-1:3,I:9,J:9,K-1:6"));

	  registerProcessorParameter("collectionName" ,
				     "collection name for SDHCAL hits" ,
				     collectionName,
				     string("HCALBarrel"));

}

myProc::~myProc() {}


void myProc::init() {

	/***********************************************************
	 * Define all algorithms, add them in the algorithm manager
	 ***********************************************************/
	algorithmManager = AlgorithmManager::GetInstance();

	/*
	 * Here the user must register the algorithm to use.
	 * example :
	 *
	 *     algorithmManager->RegisterAlgorithm( new ClusteringAlgorithm() );
	 *
	 */

	LoadManagers();
}

void myProc::processRunHeader( LCRunHeader* run ) {

}

void myProc::processEvent( LCEvent * evt ) {

	LoadEvent( evt );

	/****************************************************************************************************
	 *
	 * Here the user must process an event using some algorithms.
	 * The hit collection of the event is stored in the hitManager.
	 * To access it :
	 *
	 *    HitCollection *hitCollection = hitManager->GetHitCollection();
	 *
	 * To run an algorithm, please check if it is registered before using it.
	 * This avoid to throw an exception.
	 * example :
	 *
	 *     if( algorithmManager->AlgorithmIsRegistered("ClusteringAlgorithm") ) {
	 *        ClusteringAlgorithm* clusteringAlgo = (ClusteringAlgorithm *) algorithmManager->GetAlgorithm("ClusteringAlgorithm");
	 *        // Do something...
	 *     }
	 *
	 * To save some variables in a root file, use the analysis manager.
	 * example :
	 *
	 *     int evtNb = evt->getEventNumber();
	 *     vector<int> hitLayers;
	 *
	 *     for(unsigned int j=0 ; j<hitCollection->size() ; j++) {
	 *
	 *        IntVec ijk = hitCollection->at(j)->GetIJK();
	 *        hitLayers.push_back( ijk.at(2) );
	 *     }
	 *
	 *	   // The first argument is the tree name, the second the branch name
	 *	   // and the last one the variable or the variable address for vectors
	 *     analysisManager->Set("myTree","evtNumber",evtNb);
	 *     analysisManager->Set("myTree","K",&hitLayers);
	 *     analysisManager->Fill("myTree");
	 *
	 ****************************************************************************************************/

	ClearAllContent();
}


void myProc::check( LCEvent *evt ) {

}

void myProc::end() {

	AnalysisManager::GetInstance()->End();
	AnalysisManager::Kill();
	AlgorithmManager::Kill();
	HitManager::Kill();
	ClusteringManager::Kill();
	CoreManager::Kill();
	ShowerManager::Kill();
	SdhcalConfig::Kill();
}


void myProc::LoadManagers() {

	/************************
	 * SDHCAL configurations
	 ************************/
	SdhcalConfig *config = SdhcalConfig::GetInstance();
	cout << "Loading configuration file : " << configFileName << endl;
	config->LoadFile( configFileName );


	/*****************************
	 * Get all manager instances
	 *****************************/

	clusteringManager = ClusteringManager::GetInstance();
	analysisManager = AnalysisManager::GetInstance();
	trackManager = TrackManager::GetInstance();
	coreManager = CoreManager::GetInstance();
	hitManager = HitManager::GetInstance();
	showerManager = ShowerManager::GetInstance();


	/****************************************************
	 * Load the analysis manager with the root file name
	 ****************************************************/

	cout << "ROOT output file : " << rootOutputFile << endl;
	analysisManager->SetRootFileName( rootOutputFile );
	analysisManager->Init();


	/**************************************************************
	 * Load the algorithm manager with the algorithm configuration
	 **************************************************************/

	algorithmManager->SetConfigFileName( algorithmFileName );
	algorithmManager->Initialize();
}


void myProc::LoadEvent( LCEvent *evt ) {

	caloHitCreator = new baboon::CaloHitCreator();
	caloHitCreator->SetDecoderString( decoderString );
	caloHitCreator->SetCollectionName( collectionName );
	caloHitCreator->CreateCaloHits( evt );

	HitManager *hitManager = HitManager::GetInstance();
	hitManager->BuildVolumeMap();
}


void myProc::ClearAllContent() {

	clusteringManager->ClearAllContent();
	hitManager->ClearAllContent();
	coreManager->ClearAllContent();
	trackManager->ClearAllContent();
	showerManager->ClearAllContent();
	delete caloHitCreator;
}

