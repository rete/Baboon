  /// \file Tag.hh
/*
 *
 * Tag.hh header template generated by fclass
 * Creation date : lun. avr. 22 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef TAG_HH
#define TAG_HH


#include <string>


namespace baboon {

	/*!
	 * Enumerator for hit tagging. Allow to classify hits in SDHCAL.
	 */
	enum Tag {
		fIsolated,
		fTrack,
		fTrackExtremity,
		fCore,
		fNoise,
		fUndefined
	};


	Tag StringToTag( const std::string tagString );

	std::string TagToString( Tag tag );



	class BaseTag {

		public:

			BaseTag( const std::string &name )
				: tagName(name) {}

			virtual const std::string GetTag() { return tagName; }

			static const std::string Tag() { return "UndefinedTag"; }

		protected:
			const std::string tagName;

	};

	class CoreTag : public BaseTag {

		public:
			CoreTag() : BaseTag("CoreTag") {}
			static const std::string Tag() { return "CoreTag"; }
	};


	class IsolatedTag : public BaseTag {

		public:
			IsolatedTag() : BaseTag("IsolatedTag") {}
			static const std::string Tag() { return "IsolatedTag"; }
	};


	class TrackTag : public BaseTag {

		public:
			TrackTag() : BaseTag("TrackTag") {}
			static const std::string Tag() { return "TrackTag"; }
	};


	class TrackExtremityTag : public BaseTag {

		public:
			TrackExtremityTag() : BaseTag("TrackExtremityTag") {}
			static const std::string Tag() { return "TrackExtremityTag"; }
	};


}  // namespace 

#endif  //  TAG_HH
