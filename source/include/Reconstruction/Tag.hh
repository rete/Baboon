  /// \file Tag.hh
/*
 *
 * Tag.hh header template generated by fclass
 * Creation date : lun. avr. 22 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef TAG_HH
#define TAG_HH


#include <string>
#include <vector>

#include "TColor.h"


namespace baboon {
//
//	/*!
//	 * Enumerator for hit tagging. Allow to classify hits in SDHCAL.
//	 */
//	enum Tag {
//		fIsolated,
//		fTrack,
//		fTrackExtremity,
//		fCore,
//		fNoise,
//		fUndefined
//	};
//
//
//	Tag StringToTag( const std::string tagString );
//
//	std::string TagToString( Tag tag );



	class BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			BaseTag( const std::string &name = "" , int color = kWhite )
				: tagName( name ) , color( color ) {}

			/*!
			 *
			 *
			 *
			 */
			virtual const std::string GetTag() const
				{ return tagName; }

			/*!
			 *
			 *
			 *
			 */
			BaseTag &operator =( const BaseTag &tag ) {
				this->CopyTag( tag );
				return *this;
			}

			/*!
			 *
			 *
			 *
			 */
			virtual int GetColor() const
				{ return color; }

			/*!
			 *
			 *
			 *
			 */
			virtual void CopyTag( const BaseTag &tag ) {

				this->tagName = tag.GetTag();
				this->color = tag.GetColor();
			}

		protected:

			std::string tagName;
			int color;

	};

	bool operator ==( const BaseTag &tag1 , const BaseTag &tag2 );

	bool operator !=( const BaseTag &tag1 , const BaseTag &tag2 );


	class CoreTag : public BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			CoreTag() : BaseTag( "CoreTag" , kMagenta )
				{}

			/*!
			 *
			 *
			 *
			 */
			static const std::string Tag()
				{ return "CoreTag"; }

	};


	class IsolatedTag : public BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			IsolatedTag() : BaseTag( "IsolatedTag" , kBlue )
				{}

			/*!
			 *
			 *
			 *
			 */
			static const std::string Tag()
				{ return "IsolatedTag"; }

	};


	class TrackTag : public BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			TrackTag() : BaseTag( "TrackTag" , kRed )
				{}

			/*!
			 *
			 *
			 *
			 */
			static const std::string Tag()
				{ return "TrackTag"; }

	};


	class TrackExtremityTag : public BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			TrackExtremityTag() : BaseTag( "TrackExtremityTag" , kGreen )
				{}

			/*!
			 *
			 *
			 *
			 */
			static const std::string Tag()
				{ return "TrackExtremityTag"; }

	};

	class NoiseTag : public BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			NoiseTag() : BaseTag( "NoiseTag" , kYellow )
				{}

			/*!
			 *
			 *
			 *
			 */
			static const std::string Tag()
				{ return "NoiseTag"; }

	};

	class UndefinedTag : public BaseTag {

		public:

			/*!
			 *
			 *
			 *
			 */
			UndefinedTag() : BaseTag( "UndefinedTag" , kOrange+2 )
				{}

			/*!
			 *
			 *
			 *
			 */
			static const std::string Tag()
				{ return "UndefinedTag"; }

	};


	typedef std::vector<BaseTag> TagCollection;

}  // namespace 

#endif  //  TAG_HH
