  /// \file EnergyMinimizer.hh
/*
 *
 * EnergyMinimizer.hh header template generated by fclass
 * Creation date : lun. d�c. 2 2013
 *
 * This file is part of XXX libraries.
 * 
 * XXX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * XXX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : R�mi Et�
 * @version
 * @copyright
 *
 *
 */


#ifndef ENERGYMINIMIZER_HH
#define ENERGYMINIMIZER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>

#include "Exception.hh"

#include "TFitter.h"


namespace baboon {

	/**
	 * @brief  EnergyMinimizer class
	 */
	class EnergyMinimizer {

	public:

		/**
		 * @brief Parameter class
		 */
		struct FitterParameter {

			FitterParameter()
				: name("")
				, variable(0.0)
				, error(0.0)
				, lowerValue(0.0)
				, upperValue(0.0) {}

			std::string name;
			double variable;
			double error;
			double lowerValue;
			double upperValue;
		};



		/**
		 * @brief Return the unique instance of the class
		 */
		static EnergyMinimizer *GetInstance();

		/**
		 * @brief Kill the instance
		 */
		static void Kill();

		/**
		 * @brief
		 */
		void SetMinimizerType( const std::string &type );

		/**
		 * @brief
		 */
		void Minimize();

		/**
		 * @brief
		 */
		void AddParameter( const FitterParameter &param );

		/**
		 * @brief
		 */
		void SetPrintOutLevel( double level );

		/**
		 * @brief
		 */
		void SetFunction( void (*func) (int& nDim , double* gout , double& result , double par[] , int flg) );

		/**
		 * @brief
		 */
		void SetNumberOfIteration( int nbOfIt );

		/**
		 * @brief
		 */
		const std::vector<FitterParameter> &GetInputParameters();

		/**
		 * @brief
		 */
		const std::vector<FitterParameter> &GetOutputParameters();

	protected:

		static EnergyMinimizer* instance;     ///< The unique instance of the class
		std::string minimizerType;
		std::vector< FitterParameter > parameterList;
		std::vector< FitterParameter > outputParameterList;
		TFitter *fitter;
		void (*function)( int& nDim , double* gout , double& result , double par[] , int flg );
		int numberOfIteration;
		std::vector<std::string> availableMinimizerTypes;

		/**
		 * @brief  Constructor
		 */
		EnergyMinimizer();

		/**
		 * @brief  Destructor
		 */
		~EnergyMinimizer();

		/**
		 * @brief Check the parameters before minimization
		 */
		bool Check();

	};  // class

}  // namespace 

#endif  //  ENERGYMINIMIZER_HH
