  /// \file ObjectBuilder.hh
/*
 *
 * ObjectBuilder.hh header template generated by fclass
 * Creation date : mar. avr. 30 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef OBJECTBUILDER_HH
#define OBJECTBUILDER_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 


#include "Utilities/ReturnValues.hh"


namespace baboon {

	/*!
	 *
	 * @brief Class ObjectBuilder
	 *
	 */

	template <typename T>
	class ObjectBuilder {

		/*!
		 *
		 * @brief Class to throw in case of error
		 *
		 */
		class BadObjectGenerationError {};

			protected:


				/*!
				 *
				 * @brief Default Constructor
				 *
				 */
				ObjectBuilder()
					: object(0) {;}

				/*!
				 *
				 * @brief Default Destructor
				 *
				 */
				virtual ~ObjectBuilder() {;}

				/*!
				 *
				 * @brief Method to build the object.
				 *
				 */
				virtual void BuildObject() = 0;

				/*!
				 *
				 * @brief Method to clear the object.
				 *
				 */
				virtual Return ClearObject() = 0;

				T *object;
				bool forceGenerate;
//				static ObjectBuilder<T> *instance;

			public:

				/*!
				 *
				 * @brief Force object generation
				 *
				 */
				Return SetForceGenerate( bool boolVal ) {
					forceGenerate = boolVal;
					return S_OK();
				}

				/*!
				 *
				 * @brief return the object. Rebuild it if forceGenerate set to true
				 *
				 */
				virtual T* GetObject() {

					Return ret;
					if( forceGenerate ) {
						ret = this->ClearObject();
						if ( !ret.OK )
							throw BadObjectGenerationError();
						this->BuildObject();
					}
					return object;

				}

				/*!
				 *
				 * @ brief Set the object. Used if an other specific way to build the object has been implemented somewhere else
				 *
				 */
				virtual Return SetObject( T *obj ) {

					Return ret;
					if( object != 0 ) {
						ret = this->ClearObject();
						if( !ret.OK ) return S_ERROR( ret.message );
					}
					object = obj;
					return S_OK();
				}


	};  // class

}  // namespace 

#endif  //  OBJECTBUILDER_HH
