  /// \file BaboonProcessor.hh
/*
 *
 * BaboonProcessor.hh header template generated by fclass
 * Creation date : lun. mai 27 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef BABOONPROCESSOR_HH
#define BABOONPROCESSOR_HH

#include "marlin/Processor.h"
#include "EVENT/CalorimeterHit.h"
#include "lcio.h"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>

#include "Config/SdhcalConfig.hh"
#include "Algorithm/AlgorithmHeaders.hh"
#include "Managers/AlgorithmManager.hh"
#include "Managers/AnalysisManager.hh"
#include "Managers/CoreManager.hh"
#include "Managers/HitManager.hh"
#include "Managers/CoreManager.hh"
#include "Managers/ShowerManager.hh"
#include "Managers/ClusteringManager.hh"
#include "Managers/TrackManager.hh"
#include "MarlinProcessor/CaloHitCreator.hh"
#include "Geometry/SDHCALPrototype.hh"

#include "TRint.h"
#include "TGLViewer.h"
#include "TColor.h"


namespace baboon {

	/*
	 * Class BaboonProcessor
	 * Inherits from base class marlin::Processor
	 */

	class BaboonProcessor : public marlin::Processor {

		public:

			/*!
			 *
			 * Default Constructor
			 *
			 */
			BaboonProcessor( const std::string & );

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~BaboonProcessor();

			/*!
			 *
			 * @brief Called by Marlin to get a new Processor
			 *
			 */
			virtual Processor *newProcessor() = 0;

			/*!
			 *
			 * Called at the begin of the job before anything is read.
			 * Use to initialize the processor, e.g. book histograms.
			 *
			 */
			virtual void init();

			/*!
			 *
			 *  Called for every run.
			 *
			 */
			virtual void processRunHeader( EVENT::LCRunHeader* run );

			/*!
			 *
			 *  Called for every event - the working horse.
			 *
			 */
			virtual void processEvent( EVENT::LCEvent * evt );


			/*!
			 *
			 * @brief Check the event
			 *
			 */
			virtual void check( EVENT::LCEvent * evt );

			/*!
			 *
			 *  Called after data processing for clean up.
			 *
			 */
			virtual void end();

		protected:

			/*!
			 *
			 * @brief Laod the baboon objects. Called at beginning of event in processEvent()
			 *
			 */
			void LoadEvent( EVENT::LCEvent *evt );

			/*!
			 *
			 * @brief Clear all the baboon content. Called at the end of event in processEvent()
			 *
			 */
			void ClearAllContent();

			/*!
			 *
			 * @brief Load the managers. Called in init() function.
			 *
			 */
			void LoadManagers();

			/*!
			 *
			 * @brief Must be defined by the user. Init the BABOON processor
			 *
			 */
			virtual Return Init() = 0;

			/*!
			 *
			 * @brief Must be defined by the user. Process the run header.
			 *
			 */
			virtual Return ProcessRunHeader( EVENT::LCRunHeader* run  ) = 0;

			/*!
			 *
			 * @brief Must be defined by the user. Process an event in the BABOON framework
			 *
			 */
			virtual Return ProcessEvent( const unsigned int &evtNb ) = 0;

			/*!
			 *
			 * @brief Must be defined by the user. Check the event.
			 *
			 */
			virtual Return Check( EVENT::LCEvent * evt ) = 0;

			/*!
			 *
			 * @brief Must be defined by the user. Called after processing all the events.
			 *
			 */
			virtual Return End() = 0;



			std::string baboonHome;
			std::string configFileName;
			std::string algorithmFileName;
			std::string rootOutputFile;
			std::string decoderString;
			std::string collectionName;
			bool graphicalEnvironment;

			baboon::CaloHitCreator *caloHitCreator;

			baboon::HitManager        *hitManager;
			baboon::ClusteringManager *clusteringManager;
			baboon::CoreManager       *coreManager;
			baboon::ShowerManager     *showerManager;
			baboon::TrackManager      *trackManager;
			baboon::AnalysisManager   *analysisManager;
			baboon::AlgorithmManager  *algorithmManager;

			SDHCALPrototype *calorimeter;


	};  // class

}  // namespace 

#endif  //  BABOONPROCESSOR_HH
