  /// \file DistanceAgglomerationAlgorithm.hh
/*
 *
 * DistanceAgglomerationAlgorithm.hh header template generated by fclass
 * Creation date : mer. avr. 17 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef DISTANCEAGGLOMERATIONALGORITHM_HH
#define DISTANCEAGGLOMERATIONALGORITHM_HH

// base class
#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 

// sdhcal includes
#include "Exception.hh"
#include "Objects/Cluster.hh"
#include "Objects/HitCollection.hh"


namespace baboon {

	/*!
	 * Class DistanceAgglomerationAlgorithm
	 * Inherits from base class AbstractAlgorithm
	 */

	class DistanceAgglomerationAlgorithm : public AbstractAlgorithm {

		public:
			/*! Default Constructor */
			DistanceAgglomerationAlgorithm();

			/*! Default Destructor */
			virtual ~DistanceAgglomerationAlgorithm();

			/*! Set the input hit collection for the algorithm */
			inline void SetHitCollection( HitCollection *hitCol )
				{ hitCollection = hitCol; }

			/*! Set the starting hit */
			inline void SetStartingHit( Hit *hit )
				{ startingHit = hit; }


		protected:
			/*! Hit collection for the algorithm */
			HitCollection *hitCollection;

			/*! Hit starting point for the algorithm */
			Hit *startingHit;

			/* Final aggregate after algorithm processing */
			Cluster *aggregate;

			/*! Initialize the algorithm, i.e by initializing specific variables */
			virtual Return Init();

			/*! Execute the algorithm */
			virtual Return Execute();

			/*! Finalize the algorithm*/
			virtual Return End();

			/*! Allow to check if everything is well set in the algorithm before starting it */
			virtual Return CheckConsistency();


	};  // class

}  // namespace 

#endif  //  DISTANCEAGGLOMERATIONALGORITHM_HH
