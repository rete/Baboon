  /// \file ClusteringAlgorithm.hh
/*
 *
 * ClusteringAlgorithm.hh header template generated by fclass
 * Creation date : mar. mai 7 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef CLUSTERINGALGORITHM_HH
#define CLUSTERINGALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>
#include <algorithm>


#include "Objects/Hit.hh"
#include "Managers/HitManager.hh"
#include "Objects/Cluster.hh"
#include "Utilities/Globals.hh"

namespace baboon {


	enum ClusteringMode {
		fClustering2D,
		fClustering3D
	};

	/*!
	 *
	 * @brief Class ClusteringAlgorithm
	 * Inherits from base class AbstractAlgorithm
	 *
	 */

	class ClusteringAlgorithm : public AbstractAlgorithm {

		public:

			/*!
			 *
			 * Default Constructor
			 *
			 */
			ClusteringAlgorithm();

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~ClusteringAlgorithm();



		protected:

			ClusteringMode fMode;
			Tag hitTagToCluster;
			ClusterCollection *clusterCollection;

			/*!
			 *
			 * @brief : Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual void Init();


			/*!
			 *
			 * @brief : Execute the algorithm
			 *
			 */
			virtual void Execute();


			/*!
			 *
			 * @brief : Finalize the algorithm
			 *
			 */
			virtual void End();


			/*!
			 *
			 * @brief : Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();


		public:

			/*!
			 *
			 * @brief Set the clustering mode : 2D , 3D
			 *
			 */
			inline void SetClusteringMode( ClusteringMode mode )
				{ fMode = mode; }

			/*!
			 *
			 * @brief Set the cluster collection you want to have at the end
			 *
			 */
			inline void SetClusterCollection( ClusterCollection *clusterCol )
				{ clusterCollection = clusterCol; }

			/*!
			 *
			 * @brief Set the hit tag to cluster hits
			 *
			 */
			inline void SetHitTagToCluster( Tag fTag )
				{ hitTagToCluster = fTag; }

	};  // class

}  // namespace 

#endif  //  CLUSTERINGALGORITHM_HH
