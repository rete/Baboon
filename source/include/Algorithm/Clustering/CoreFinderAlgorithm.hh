/*
 *
 * CoreFinderAlgorithm.hh header template generated by fclass
 * Creation date : Mon Apr  8 17:46:03 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef COREFINDERALGORITHM_HH
#define COREFINDERALGORITHM_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>

#include "Algorithm/AbstractAlgorithm.hh"
#include "Algorithm/Clustering/ClusteringAlgorithm.hh"
#include "Managers/ClusteringManager.hh"
#include "Exception.hh"
#include "Managers/HitManager.hh"
#include "Managers/CoreManager.hh"
#include "Objects/HitCollection.hh"
#include "Objects/Core.hh"


namespace baboon {


	/*!
	 * Class CoreFinderAlgorithm.
	 * Inherit from 'AbstractAlgorithm' base class. \n
	 * Find the core hits and tag them as fCore.
	 */

	class CoreFinderAlgorithm : public AbstractAlgorithm {



		public :

			/*!
			 *
			 * @brief Default Constructor
			 *
			 */
			CoreFinderAlgorithm();

			/*!
			 *
			 * @brief Default Destructor
			 *
			 */
			virtual ~CoreFinderAlgorithm();

			/*!
			 *
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual Return Init();

			/*!
			 *
			 * @brief Execute the algorithm
			 *
			 */
			virtual Return Execute() ;

			/*!
			 *
			 * @brief Finalize the algorithm
			 *
			 */
			virtual Return End();

			/*!
			 *
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();

			/*! Set the hit collection needed for the algorithm */
//			inline void SetHitCollection( HitCollection *hitCol )
//				{ hitCollection = hitCol; }

			/*!
			 *
			 * @brief Set the distance between two pads to clusterize core hits
			 *
			 */
			inline void SetDistance( int d )
				{ distance = d; }


		protected :

			HitCollection *hitCollection;
			std::vector<int> threshCountVec;

			// Algorithm parameters
			int coreCountThreshold;
			int distance;
			double minimumThresholdConcentration;

	};

}

#endif  // COREFINDERALGORITHM_HH
