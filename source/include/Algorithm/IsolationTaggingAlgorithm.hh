  /// \file IsolationTaggingAlgorithm.hh
/*
 *
 * IsolationTaggingAlgorithm.hh header template generated by fclass
 * Creation date : lun. avr. 22 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef ISOLATIONTAGGINGALGORITHM_HH
#define ISOLATIONTAGGINGALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"
#include "Exception.hh"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 

#include "Objects/Cluster.hh"
#include "Objects/HitCollection.hh"
#include "Managers/HitManager.hh"
#include "Utilities/Globals.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Internal.hh"

namespace baboon {

	/*!
	 * @brief Class IsolationTaggingAlgorithm
	 * Inherits from base class AbstractAlgorithm
	 */

	class IsolationTaggingAlgorithm : public AbstractAlgorithm {

		public:

			/*!
			 *
			 * @brief Default Constructor
			 *
			 */
			IsolationTaggingAlgorithm();

			/*!
			 *
			 * @brief Default Destructor
			 *
			 */
			virtual ~IsolationTaggingAlgorithm();

			/*!
			 *
			 * @brief Set the hit collection for the algorithm
			 *
			 */
			void SetHitCollection( HitCollection *hitCol )
				{ hitCollection = hitCol; }

			/*!
			 *
			 * @brief Return the isolation weights
			 *
			 */
			inline std::vector<double> GetIsolationWeights()
				{ return isolationWeights; }


		protected:

			/*!
			 *
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual void Init();

			/*!
			 *
			 * @brief Execute the algorithm
			 *
			 */
			virtual void Execute();

			/*!
			 *
			 * @brief Finalize the algorithm
			 *
			 */
			virtual void End();

			/*!
			 *
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();


			HitCollection *hitCollection;

			// Algorithm parameters
			int distance;
			double concentrationLimit;
			std::vector<double> isolationWeights;


	};  // class

}  // namespace 

#endif  //  ISOLATIONTAGGINGALGORITHM_HH
