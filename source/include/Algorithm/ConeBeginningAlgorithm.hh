  /// \file ConeBeginningAlgorithm.hh
/*
 *
 * ConeBeginningAlgorithm.hh header template generated by fclass
 * Creation date : ven. avr. 19 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef CONEBEGINNINGALGORITHM_HH
#define CONEBEGINNINGALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"
#include "Exception.hh"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 
#include <algorithm>

#include "Geometry/Cone.hh"
#include "Objects/Hit.hh"
#include "Managers/HitManager.hh"


namespace baboon {

/* 
 * Class ConeBeginningAlgorithm
 * Inherits from base class AbstractAlgorithm
 */ 

class ConeBeginningAlgorithm : public AbstractAlgorithm {

	public:

		/*! Default Constructor */
		ConeBeginningAlgorithm();

		/*! Default Destructor */
		virtual ~ConeBeginningAlgorithm();


	protected:

		/*! Hit collection for the algorithm */
		HitCollection *hitCollection;

		/*! Initialize the algorithm, i.e by initializing specific variables */
		virtual void Init();

		/*! Execute the algorithm */
		virtual void Execute();

		/*! Finalize the algorithm*/
		virtual void End();

		/*! Allow to check if everything is well set in the algorithm before starting it */
		virtual Return CheckConsistency();


};  // class 


}  // namespace 


#endif  //  CONEBEGINNINGALGORITHM_HH
