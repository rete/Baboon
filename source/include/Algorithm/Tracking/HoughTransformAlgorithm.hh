/*
 *
 * HoughTransformAlgorithm.hh header template generated by fclass
 * Creation date : Thu Mar 14 21:55:13 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef HOUGHTRANSFORMALGORITHM_HH
#define HOUGHTRANSFORMALGORITHM_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <numeric>
#include <map>
#include <vector>
#include <utility>
#include <algorithm>


// sdhcal includes
#include "Algorithm/AbstractAlgorithm.hh"
#include "Objects/TrackSegment.hh"
#include "Objects/Cluster.hh"
#include "Managers/ClusteringManager.hh"
#include "Objects/Hit.hh"
#include "Reconstruction/Tag.hh"
#include "Managers/HitManager.hh"

#include "Utilities/ReturnValues.hh"

namespace baboon {




	/*!
	 * Class HoughTransformAlgorithm.
	 * Inherit from 'AbstractAlgorithm' base class.
	 */

	class HoughTransformAlgorithm : public AbstractAlgorithm {


		/*!
		 * Hough tag used in HoughTransformAlgorithm to tag candidate clusters
		 */

		enum HoughTag {
			fGood,
			fBad
		};

		typedef struct {

			public :
				Cluster *cluster;
				std::vector<int> rhox;
				std::vector<int> rhoy;
				HoughTag tagx;
				HoughTag tagy;
				HoughTag finalTag;

		} HoughCluster;


		typedef std::vector<HoughCluster*> HoughClusterCollection;


		protected :

			int thetaMax;

			int rMax;

			int clusterSizeLimit;

			int minimumBinning;

			int deltaPosMax;

			int trackSegmentMinimumSize;

			int maximumDistanceBetweenHitsInPlane;

			int maximumDistanceBetweenHitsForLayers;

			int ** houghSpaceX;

			int ** houghSpaceY;

			TrackSegmentCollection *trackSegmentCollection;

			ClusterCollection *clusterCollection;

			HitCollection *hitCollection;

			virtual void Init();

			virtual void Execute();

			virtual void End();

			virtual Return CheckConsistency();

			void BuildHoughSpaceX();

			void BuildTrackSegments();

			void TagClusters();

			void DeleteHoughSpace();

			void AllocateHoughSpace();


		public :
			/*! Default Constructor */
			HoughTransformAlgorithm();
			/*! Default Destructor */
			virtual ~HoughTransformAlgorithm();

			inline void SetClusterCollection(ClusterCollection *clusterCol)
				{ clusterCollection = clusterCol; }

			inline TrackSegmentCollection *GetTrackSegmentCollection()
				{ return trackSegmentCollection; }



	};

}

#endif  // HOUGHTRANSFORMALGORITHM_HH
