  /// \file ConnectorClusteringAlgorithm.hh
/*
 *
 * ConnectorClusteringAlgorithm.hh header template generated by fclass
 * Creation date : jeu. oct. 10 2013
 *
 * This file is part of Baboon libraries.
 * 
 * Baboon is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Baboon is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Rémi Eté
 * @version 1.0.0
 * @copyright Rémi Eté
 *
 *
 */


#ifndef CONNECTORCLUSTERINGALGORITHM_HH
#define CONNECTORCLUSTERINGALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>


#include "Detector/Calorimeter.hh"
#include "Reconstruction/Connector.hh"
#include "Objects/Cluster.hh"
#include "Monitoring/BaboonMonitoring.hh"
#include "TEveArrow.h"
#include "Geometry/Cone.hh"



namespace baboon {


	/*!
	*
	* @brief  ConnectorClusteringAlgorithm class
	* Inherits from base class AbstractAlgorithm
	*
	*/
	class ConnectorClusteringAlgorithm : public AbstractAlgorithm {

		public:

			struct TrackHelper {

				Track *track;
				ThreeVector beginPosition;
				ThreeVector endPosition;
				ThreeVector forwardThrust;
				ThreeVector backwardThrust;
				PointCollection< CaloHit * , CaloHit * >::type forwardConnectedPoints;
				PointCollection< CaloHit * , CaloHit * >::type backwardConnectedPoints;
				bool isPrimaryTrack;
			};

			typedef std::vector< TrackHelper * > TrackHelperCollection;

			/*!
			*
			* @brief  Default constructor
			*
			*/
			ConnectorClusteringAlgorithm();

			/*!
			*
			* @brief  Default destructor
			*
			*/
			virtual ~ConnectorClusteringAlgorithm();

			/*!
			 *
			 *
			 *
			 */
			void SetCalorimeter( Calorimeter *calo )
				{ calorimeter = calo; }


		protected:

			/*!
			 *
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual Return Init();


			/*!
			 *
			 * @brief Execute the algorithm
			 *
			 */
			virtual Return Execute();


			/*!
			 *
			 * @brief Finalize the algorithm
			 *
			 */
			virtual Return End();


			/*!
			 *
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();

			/*!
			 *
			 *
			 *
			 */
			void FillTrackHelper( TrackHelper *trackHelper );

			/*!
			 *
			 *
			 *
			 */
			void ConnectLayerCaloHits( int layer );

			/*!
			 *
			 *
			 *
			 */
			void DrawConnector( Connector< CaloHit * , CaloHit * > *connector , int color );

			/*!
			 *
			 *
			 *
			 */
			void SortConnectorsByWeight( ConnectorCollection< CaloHit * , CaloHit * >::type &connectors );

			/*!
			 *
			 *
			 *
			 */
			void ConnectTracksWithClusters();

			/**
			 *
			 */
			void AgglomerateChargedParticle( TrackHelper *trackHelper  );


			Calorimeter *calorimeter;         ///< The calorimeter instance
			ConnectorCollection< CaloHit * , CaloHit * >::type allConnectors;
			PointCollection< CaloHit * , CaloHit * >::type allPoints;
//			PointCollection< Cluster * , TrackHelper * >::type clusterToTrackPoints;
			OrderedPointCollection< CaloHit * , CaloHit * >::type allOrderedPoints;
			TrackHelperCollection *trackHelpers;


			// algorithm parameters
			double lookupTransverseDistance;
			int lookupLayerDistance;
			int maxNbOfForwardConnectors;
			double trackConnectionConeLength;
			double trackConnectionOpeningAngle;
			double minimumWeight;


	};  // class

}  // namespace 

#endif  //  CONNECTORCLUSTERINGALGORITHM_HH
