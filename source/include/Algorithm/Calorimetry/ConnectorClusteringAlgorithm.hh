  /// \file ConnectorClusteringAlgorithm.hh
/*
 *
 * ConnectorClusteringAlgorithm.hh header template generated by fclass
 * Creation date : jeu. oct. 10 2013
 *
 * This file is part of Baboon libraries.
 * 
 * Baboon is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Baboon is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Rémi Eté
 * @version 1.0.0
 * @copyright Rémi Eté
 *
 *
 */


#ifndef CONNECTORCLUSTERINGALGORITHM_HH
#define CONNECTORCLUSTERINGALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>


#include "Detector/Calorimeter.hh"
#include "Objects/Cluster.hh"
#include "Monitoring/BaboonMonitoring.hh"
#include "TEveArrow.h"
#include "Geometry/Cone.hh"
#include "Managers/ClusteringManager.hh"

namespace baboon {

	/**
	 * @brief  ConnectorClusteringAlgorithm class
	 * Inherits from base class AbstractAlgorithm
	 */
	class ConnectorClusteringAlgorithm : public AbstractAlgorithm {

		public:

			/**
			 * @brief A connector class to connect objects with a weight
			 */
			template <typename T , typename S>
			class Connector {

			public:

				/**
				 * @brief Constructor
				 */
				Connector() {

					obj1 = 0;
					obj2 = 0;
					weight = 1.0;
				}

				/**
				 * @brief Connect two objects with a given weight. Default weight is 1.0
				 */
				void Connect( T *o1 , S *o2 , double w = 1.0 ) {

					if( o1 == 0 || o2 == 0 )
						return;

					obj1 = o1;
					obj2 = o2;
					weight = w;
				}

				/**
				 * @brief Returns the first connected object
				 */
				T *First() {
					return obj1;
				}

				/**
				 * @brief Returns the second connected object
				 */
				S* Second() {
					return obj2;
				}

				/**
				 * @brief Set the weight of the connection
				 */
				void SetWeight( double w ) {

					weight = w;
				}

				/**
				 * @brief return the weight of the connection
				 */
				double GetWeight() {

					return weight;
				}


			protected:

				double weight; ///< The weight of the connection
				T *obj1;       ///< The first connected object
				S *obj2;       ///< The second connected object

			};

			typedef ConnectorClusteringAlgorithm::Connector<CaloHit, CaloHit> CaloHitConnector;
			typedef std::vector< CaloHitConnector * > CaloHitConnectors;

			/**
			 * @brief Default constructor
			 */
			ConnectorClusteringAlgorithm();

			/**
			 * @brief Default destructor
			 */
			virtual ~ConnectorClusteringAlgorithm();

			/**
			 * @brief Set the calorimeter to use
			 */
			void SetCalorimeter( Calorimeter *calo )
				{ calorimeter = calo; }


		protected:

			/**
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 */
			virtual Return Init();


			/**
			 * @brief Execute the algorithm
			 */
			virtual Return Execute();


			/**
			 * @brief Finalize the algorithm
			 */
			virtual Return End();


			/**
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 */
			virtual Return CheckConsistency();

			/**
			 * @brief Draw a connector with a given color in the monitoring if it is available
			 */
			void DrawConnector( CaloHitConnector *connector , int color );

			/**
			 * @brief Make the initial connections between calo hits. Uses only non-isolated hits
			 */
			void InitializeConnectors();

			/**
			 * @brief Iterates on connection and choose only one backward connector for a given calo hit
			 */
			void IterateAndCleanConnectors();

			/**
			 * @brief Create the clusters using a recursive function ( see RecursiveClustering() ) and using the remaining connection
			 */
			void CreateClusters();

			/**
			 * @brief Merge the cluster that are small and clusters that share the same starting 2D cluster
			 */
			void ClusterMerging();

			/**
			 * @brief A recursive function to cluster the the calo hits using the connectors
			 */
			void RecursiveClustering( CaloHit *caloHit , Cluster *cluster );

			/**
			 * @brief Function used by std::sort to sort the calo hits by increasing layer
			 */
			static bool SortByLayer( CaloHit * , CaloHit * );

			/**
			 * @brief Returns the distance between the position and the closest calo hit in the cluster
			 */
			double DistanceToCluster( const ThreeVector &pos , Cluster *cluster );




			Calorimeter *calorimeter;         ///< The calorimeter instance
			CaloHitConnectors connectors;     ///< All the connectors created, cleaned and sorted during the algorithm
			CaloHitCollection usedCaloHits;   ///< A temporary calo hit collection used during recursive clustering
			ClusterCollection finalClusters;  ///< The final cluster collection. These are registered into the clustering manager at the end

			// new algorithm parameters following the Arbor ideas
			double thresholdDistanceXY;      ///< The initial distance in X and Y direction to make the initial connections
			double thresholdDistanceZ;       ///< The initial distance in Z direction to make the initial connections
			int minimumClusterSizeMerging;   ///< The maximum size for a cluster to be merged in a bigger cluster


	};  // class

}  // namespace 

#endif  //  CONNECTORCLUSTERINGALGORITHM_HH
