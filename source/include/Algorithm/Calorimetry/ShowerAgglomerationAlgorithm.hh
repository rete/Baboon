  /// \file ShowerAgglomerationAlgorithm.hh
/*
 *
 * ShowerAgglomerationAlgorithm.hh header template generated by fclass
 * Creation date : lun. juil. 8 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef SHOWERAGGLOMERATIONALGORITHM_HH
#define SHOWERAGGLOMERATIONALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>
#include <utility>

#include "Managers/CoreManager.hh"
#include "Managers/ShowerManager.hh"
#include "Objects/Core.hh"
#include "Objects/Shower.hh"
#include "Utilities/Internal.hh"
#include "Utilities/ReturnValues.hh"
#include "Monitoring/BaboonMonitoring.hh"
#include "Detector/Calorimeter.hh"


#include "TEveArrow.h"

namespace baboon {

	/*!
	 *
	 * Class ShowerAgglomerationAlgorithm
	 * Inherits from base class AbstractAlgorithm
	 *
	 */

	class ShowerAgglomerationAlgorithm : public AbstractAlgorithm {

		public:

			class Connector;

			/*!
			 *
			 *
			 *
			 */
			class ConnectedHit {

				public:

					/*!
					 *
					 *
					 *
					 */
					void AddConnector( ShowerAgglomerationAlgorithm::Connector *connector );

					/*!
					 *
					 *
					 *
					 */
					void RemoveConnector( ShowerAgglomerationAlgorithm::Connector *connector );

					/*!
					 *
					 *
					 *
					 */
					bool IsConnectedTo( ShowerAgglomerationAlgorithm::Connector *connector );

					/*!
					 *
					 *
					 *
					 */
					bool IsConnectedWith( ShowerAgglomerationAlgorithm::ConnectedHit *connectedHit );

					/*!
					 *
					 *
					 *
					 */
					void SetCaloHit( CaloHit *h );

					/*!
					 *
					 *
					 *
					 */
					CaloHit *GetCaloHit();

					/*!
					 *
					 *
					 *
					 */
					bool HasNoConnection();

					/*!
					 *
					 *
					 *
					 */
					std::vector<ShowerAgglomerationAlgorithm::Connector *> &GetConnectors()
						{ return connectors; }


				protected:

					std::vector<ShowerAgglomerationAlgorithm::Connector *> connectors;
					CaloHit *caloHit;

			};


			typedef std::vector<ConnectedHit *> ConnectedHitCollection;

			/*!
			 *
			 *
			 *
			 */
			class Connector {

				public:
				/*
				 *
				 *
				 *
				 */
				void Connect( ConnectedHit *f , ConnectedHit *s );

				/*
				 *
				 *
				 *
				 */
				void Connect( ConnectedHit *f , ConnectedHit *s , double w );

				/*!
				 *
				 *
				 *
				 */
				void Disconnect();

				/*!
				 *
				 *
				 *
				 */
				void SetWeight( double w )
					{ if( w >= 0 ) weight = w; }

				/*!
				 *
				 *
				 *
				 */
				double GetWeight()
					{ return weight; }

				/*!
				 *
				 *
				 *
				 */
				ConnectedHit *GetFirst()
					{ return hitPair.first; }

				/*!
				 *
				 *
				 *
				 */
				ConnectedHit *GetSecond()
					{ return hitPair.second; }


			protected:
				std::pair<ConnectedHit *, ConnectedHit *> hitPair;
				double weight;

			};

			typedef std::vector<Connector *> ConnectorCollection;



			/*!
			 *
			 * Default Constructor
			 *
			 */
			ShowerAgglomerationAlgorithm();

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~ShowerAgglomerationAlgorithm();

			/*!
			 *
			 *
			 *
			 */
			Return SetCalorimeter( Calorimeter *calo );

		protected:

			/*!
			 *
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual Return Init();


			/*!
			 *
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();


			/*!
			 *
			 * @brief Execute the algorithm
			 *
			 */
			virtual Return Execute();


			/*!
			 *
			 * @brief Finalize the algorithm
			 *
			 */
			virtual Return End();

			/*!
			 *
			 *
			 *
			 */
			Return CreateAllConnectors();

			/*!
			 *
			 *
			 *
			 */
			Return CleanConnectors();

			/*!
			 *
			 *
			 *
			 */
			Return DrawConnectors();

			/*!
			 *
			 *
			 *
			 */
			void DrawEveArrow( double I1 , double J1 , double K1 ,
								 double I2 , double J2 , double K2 ,
								 int color );



		protected:

			Calorimeter *calorimeter;   ///< The calorimeter
			ConnectedHitCollection *connectedHitCollection;  ///< The connected hit collection
			ConnectorCollection *connectorCollection;        ///< All the connectors
//			double distanceLimitForConnection;

			ThreeVector distanceLimitForConnection;



		public :

	};  // class

}  // namespace 

#endif  //  SHOWERAGGLOMERATIONALGORITHM_HH
