  /// \file DensityClusteringAlgorithm.hh
/*
 *
 * DensityClusteringAlgorithm.hh header template generated by fclass
 * Creation date : lun. oct. 14 2013
 *
 * This file is part of XXX libraries.
 * 
 * XXX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * XXX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : R�mi Et�
 * @version
 * @copyright
 *
 *
 */


#ifndef DENSITYCLUSTERINGALGORITHM_HH
#define DENSITYCLUSTERINGALGORITHM_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <sstream>

#include "Detector/Calorimeter.hh"
#include "Algorithm/Calorimetry/CoreFinderAlgorithm.hh"
#include "CfgParser/Data.hh"
#include "Reconstruction/EnergyCalculator/SimpleEnergyCalculator.hh"

namespace baboon {

	/*!
	*
	* @brief  DensityClusteringAlgorithm class
	* Inherits from base class AbstractAlgorithm
	*
	*/

	class DensityClusteringAlgorithm : public AbstractAlgorithm {

		public:

			/*!
			*
			* @brief  Default constructor
			*
			*/
			DensityClusteringAlgorithm();

			/*!
			*
			* @brief  Default destructor
			*
			*/
			virtual ~DensityClusteringAlgorithm();

			/*!
			 *
			 *
			 *
			 */
			void SetCalorimeter( Calorimeter *calo )
				{ calorimeter = calo; }

		protected:

			/*!
			*
			* @brief Initialize the algorithm, i.e by initializing specific variables
			*
			*/
			virtual Return Init();


			/*!
			*
			* @brief Execute the algorithm
			*
			*/
			virtual Return Execute();


			/*!
			*
			* @brief Finalize the algorithm
			*
			*/
			virtual Return End();


			/*!
			*
			* @brief Allow to check if everything is well set in the algorithm before starting it
			*
			*/
			virtual Return CheckConsistency();

			/*!
			 *
			 *
			 *
			 */
			void AgglomerateFromCaloHit( CaloHit *caloHit , Cluster *cluster );

			/*!
			 *
			 *
			 *
			 */
			bool MergeWithClosestCluster( Cluster *cluster , ClusterCollection *clusterCollection );

			CaloHitCollection treatedHits;

			Calorimeter *calorimeter;
			double initialCoreConcentration;
			double lowestDensityLimit;
			double highestDensityLimit;
			double densityStep;
			double densityError;


	};  // class


}  // namespace 

#endif  //  DENSITYCLUSTERINGALGORITHM_HH
