  /// \file MinimumSpanningTree.hh
/*
 *
 * MinimumSpanningTree.hh header template generated by fclass
 * Creation date : lun. sept. 30 2013
 *
 * This file is part of XXX libraries.
 * 
 * XXX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * XXX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : R�mi Et�
 * @version
 * @copyright
 *
 *
 */


#ifndef MINIMUMSPANNINGTREE_HH
#define MINIMUMSPANNINGTREE_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <utility>

#include "Geometry/ThreeVector.hh"

namespace baboon {

	/*!
	*
	* @brief  MinimumSpanningTree class
	* Inherits from base class AbstractAlgorithm
	*
	*/

	class MinimumSpanningTree : public AbstractAlgorithm {


		class Connector;


		/*!
		 *
		 * Point class.
		 *
		 */
		class Point {


			public:
				/*!
				 *
				 *
				 *
				 */
				void SetPosition( const double &x , const double &y , const double &z );

				/*!
				 *
				 *
				 *
				 */
				void SetPosition( const ThreeVector &pos );

				/*!
				 *
				 *
				 *
				 */
				const ThreeVector &GetPosition();

				/*!
				 *
				 *
				 *
				 */
				void AddConnector( MinimumSpanningTree::Connector *connector );

				/*!
				 *
				 *
				 *
				 */
				void RemoveConnector( MinimumSpanningTree::Connector *connector );

				/*!
				 *
				 *
				 *
				 */
				bool IsConnectedTo( MinimumSpanningTree::Connector *connector );

				/*!
				 *
				 *
				 *
				 */
				void SetObject( void *obj );

				/*!
				 *
				 *
				 *
				 */
				void *GetObject();

				/*!
				 *
				 *
				 *
				 */
				bool HasNoConnection();


			protected:

				ThreeVector position;
				std::vector<MinimumSpanningTree::Connector *> connectors;
				void *object;
		};

		/*!
		 *
		 * Connector class.
		 *
		 */
		class Connector {

			public:
				/*
				 *
				 *
				 *
				 */
				void Connect( MinimumSpanningTree::Point *point1 , MinimumSpanningTree::Point *point2 );

				/*
				 *
				 *
				 *
				 */
				void Connect( MinimumSpanningTree::Point *point1 , MinimumSpanningTree::Point *point2 , float w );

				/*!
				 *
				 *
				 *
				 */
				void Disconnect();


			protected:
				std::pair<MinimumSpanningTree::Point*,MinimumSpanningTree::Point*> pointPair;
				float weight;

		};

		public:
			/*!
			*
			* @brief  Default constructor
			*
			*/
			MinimumSpanningTree();

			/*!
			*
			* @brief  Default destructor
			*
			*/
			virtual ~MinimumSpanningTree();

			/*!
			 *
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual Return Init();

			/*!
			 *
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();

			/*!
			 *
			 * @brief Execute the algorithm
			 *
			 */
			virtual Return Execute();

			/*!
			 *
			 * @brief Finalize the algorithm
			 *
			 */
			virtual Return End();

			/*!
			 *
			 *
			 *
			 */
			void AddPoint( MinimumSpanningTree::Point *p );


		protected:

			/*!
			 *
			 *
			 *
			 */
			void ClearGraph();

			/*!
			 *
			 *
			 *
			 */
			void FindLeastConnection( MinimumSpanningTree::Connector *connector );

			std::vector<MinimumSpanningTree::Point *> initialPoints;
			std::vector<MinimumSpanningTree::Connector *> minimumSpanningTree;
			std::vector<MinimumSpanningTree::Point *> usedPoints;

	};  // class

}  // namespace 

#endif  //  MINIMUMSPANNINGTREE_HH
