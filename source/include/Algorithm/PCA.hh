  /// \file PCA.hh
/*
 *
 * PCA.hh header template generated by fclass
 * Creation date : ven. juil. 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef PCA_HH
#define PCA_HH

#include "Algorithm/AbstractAlgorithm.hh"

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>
#include <numeric>

#include "TMatrixT.h"
#include "TMatrixDEigen.h"
#include "TVectorD.h"

#include "Utilities/Globals.hh"

namespace baboon {

	/*
	 * Class PCA
	 * Inherits from base class AbstractAlgorithm
	 */

	class PCA : public AbstractAlgorithm {

		public:

			typedef std::vector<double> Row;

			/*!
			 *
			 * Default Constructor
			 *
			 */
			PCA();

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~PCA();

			/*!
			 *
			 *
			 *
			 */
			Return AddRow( const Row &row );

			/*!
			 *
			 *
			 *
			 */
			void Clear();

			/*!
			 *
			 * @brief Return the eigen vectors of the PCA
			 *
			 */
			inline TMatrixD GetEigenVectors()
				{ return eigenVectors; }

			/*!
			 *
			 * @brief Return the eigen values of the PCA
			 *
			 */
			inline TVectorD GetEigenValues()
				{ return eigenValues; }

		protected:

			typedef std::vector<Row> RowCollection;

			RowCollection pcaRows;
			TVectorD eigenValues;
			TMatrixD eigenVectors;
//			int

			/*!
			 *
			 * @brief Initialize the algorithm, i.e by initializing specific variables
			 *
			 */
			virtual Return Init();

			/*!
			 *
			 * @brief Allow to check if everything is well set in the algorithm before starting it
			 *
			 */
			virtual Return CheckConsistency();


			/*!
			 *
			 * @brief Execute the algorithm
			 *
			 */
			virtual Return Execute();


			/*!
			 *
			 * @brief Finalize the algorithm
			 *
			 */
			virtual Return End();









	};  // class

}  // namespace 

#endif  //  PCA_HH
