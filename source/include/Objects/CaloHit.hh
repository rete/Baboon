  /// \file CaloHit.hh
/*
 *
 * CaloHit.hh header template generated by fclass
 * Creation date : mer. juin 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef CALOHIT_HH
#define CALOHIT_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 


#include "Geometry/ThreeVector.hh"
#include "Utilities/ReturnValues.hh"

namespace baboon {


	enum CaloHitType {

		fAnalogicCaloHit,
		fDigitalCaloHit,
		fSemiDigitalCaloHit
	};

	enum CaloHitTag {

		fIsolatedCaloHit,
		fTrackCaloHit,
		fCoreCaloHit,
		fNoiseCaloHit,
		fUndefinedCaloHit
	};

	enum CaloHitThreshold {

		fCaloHitThr1,
		fCaloHitThr2,
		fCaloHitThr3
	};



	/*!
	 *
	 * Class CaloHit
	 *
	 */

	class CaloHit {

		public:

			/*!
			 *
			 * Default Constructor
			 *
			 */
			CaloHit( const CaloHitType &caloType );

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~CaloHit();

			/*!
			 *
			 *
			 *
			 */
			Return SetPosition( const ThreeVector &pos );

			/*!
			 *
			 *
			 *
			 */
			Return SetTime( const double &t );

			/*!
			 *
			 *
			 *
			 */
			Return SetTag( const CaloHitTag &t );

			/*!
			 *
			 *
			 *
			 */
			Return SetWeight( const double &w );

			/*!
			 *
			 *
			 *
			 */
			Return SetStave( const int &s );

			/*!
			 *
			 *
			 *
			 */
			Return SetModule( const int &m );

			/*!
			 *
			 *
			 *
			 */
			Return SetEnergy( const double &e );

			/*!
			 *
			 *
			 *
			 */
			Return SetThreshold( const CaloHitThreshold &fThr );

	  protected:

			CaloHitType type;
			CaloHitTag tag;
			CaloHitThreshold threshold;
			ThreeVector position;
			double energy;
			double time;
			double weight;
			int stave;
			int module;

	  public:

			/*!
			 *
			 *
			 *
			 */
			inline CaloHitType GetType() const
				{ return type; }

			/*!
			 *
			 *
			 *
			 */
			inline ThreeVector GetPosition() const
				{ return position; }

			/*!
			 *
			 *
			 *
			 */
			inline double GetTime() const
				{ return time; }

			/*!
			 *
			 *
			 *
			 */
			inline CaloHitTag GetTag() const
				{ return tag; }

			/*!
			 *
			 *
			 *
			 */
			inline double GetWeight() const
				{ return weight; }

			/*!
			 *
			 *
			 *
			 */
			inline int GetStave() const
				{ return stave; }

			/*!
			 *
			 *
			 *
			 */
			inline int GetModule() const
				{ return module; }

			/*!
			 *
			 *
			 *
			 */
			inline CaloHitThreshold GetThreshold() const
				{ return threshold; }

			/*!
			 *
			 *
			 *
			 */
			inline double GetEnergy() const
				{ return energy; }


	};  // class

	typedef std::vector<CaloHit*> CaloHitCollection;

}  // namespace 

#endif  //  CALOHIT_HH
