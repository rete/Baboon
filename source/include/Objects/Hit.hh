/*
 *
 * SDHCALHit.hh header template generated by fclass
 * Creation date : Wed Mar  6 17:01:13 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef HIT_HH
#define HIT_HH

#define HIT_THRESHOLD_OMP 2000

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <stdexcept>

// lcio includes
#include "IMPL/CalorimeterHitImpl.h"
#include "IMPL/LCCollectionVec.h"
#include "LCIOSTLTypes.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/CellIDEncoder.h"

// sdhcal includes
#include "Geometry/ThreeVector.hh"
#include "Config/SdhcalConfig.hh"
#include "Reconstruction/Tag.hh"

namespace baboon {

	class Cluster;

	/*!
	 * Enumerator for hit threshold
	 */
	enum HitThreshold {
		fThreshold1,
		fThreshold2,
		fThreshold3,
		fThresholdUndefined
	};

	/*!
	 * Class Hit.
	 * Inherit from 'IMPL::CalorimeterHitImpl' base class from LCIO package.
	 */
	class Hit : public IMPL::CalorimeterHitImpl {

	protected :
		/*! Hit tag identifier */
		Tag hitTag;
		/*! Hit threshold of sdhcal */
		HitThreshold fThreshold;
		/*! Hit weight */
		int weight;
		/*! position with ThreeVector */
		ThreeVector position;
		/*! ID decoder pattern for hit identification */
		std::string codingPattern;

		Cluster *cluster2D;

		Cluster *cluster3D;


	public :
		/*! Default Constructor */
		Hit();
		/*! Copy based on CalorimeterHit */
		Hit(EVENT::CalorimeterHit* hit);
		/*! Default Destructor */
		virtual ~Hit();
		/*! set the hit position */
		void SetPosition(const ThreeVector& pos) { position = pos; }
		/*! set the hit position */
		inline ThreeVector GetPosition() { return position; }
		/*! set the first threshold of sdhcal */
		inline void SetThreshold(HitThreshold fThr) { fThreshold = fThr; }
		/*! set the first threshold of sdhcal */
		inline HitThreshold GetThreshold() const { return fThreshold; }
		/*! return the hit tag */
		inline Tag GetHitTag() { return hitTag; }
		/*! set the hit tag */
		inline void SetHitTag(Tag fTag) { hitTag = fTag; }
		/*! set the hit weight */
		inline void SetWeight(int w) { weight = w; }
		/*! set the hit weight */
		inline int GetWeight() { return weight; }
		/*! return the I J K cell id */
		EVENT::IntVec GetIJK();

		void SetIJK( int I , int J , int K );

		inline void SetIJK( const EVENT::IntVec& ijkVec ) { this->SetIJK(ijkVec.at(0),ijkVec.at(1),ijkVec.at(2)); }

		IMPL::CalorimeterHitImpl *ToCalorimeterHitImpl();

		bool IsIsolatedFromHits( const std::vector<Hit*>* hitCol );

		inline Cluster *GetCluster3D()
			{ return cluster3D; }

		inline Cluster *GetCluster2D()
			{ return cluster2D; }

		void SetCluster2D( Cluster *cl );

		void SetCluster3D( Cluster *cl );

		void MergeClusters2D( Hit *hit );

		void MergeClusters3D( Hit *hit );

	};

	typedef std::vector<Hit*> HitCollection;

}

#endif  // HIT_HH
