/*
 *
 * SDHCALHit.hh header template generated by fclass
 * Creation date : Wed Mar  6 17:01:13 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef HIT_HH
#define HIT_HH

#define HIT_THRESHOLD_OMP 2000

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <stdexcept>

// sdhcal includes
#include "Geometry/ThreeVector.hh"
#include "Config/SdhcalConfig.hh"
#include "Reconstruction/Tag.hh"
#include "Utilities/Globals.hh"
#include "Utilities/ReturnValues.hh"

namespace baboon {


	/*!
	 * Enumerator for hit threshold
	 */
	enum HitThreshold {
		fThreshold1,
		fThreshold2,
		fThreshold3
	};

	class Hit;

	typedef std::vector<Hit*> HitCollection;


	/*!
	 *
	 * @brief HitParameters helper class.
	 *
	 */
	class HitParameters {

		public:
			HitThreshold threshold;
			IntVector ijk;
			ThreeVector position;
			int type;
			double time;
	};

	/*!
	 *
	 * @brief Class Hit.
	 *
	 */
	class Hit {

	protected :

		Tag hitTag;
		HitThreshold fThreshold;
		int weight;
		ThreeVector position;
		IntVector ijk;
		int type;
		double time;


	public :

		/*! Constructor with hit parameters */
		Hit( const HitParameters &params );

		/*! Default Destructor */
		virtual ~Hit();

		/*! set the hit position */
		Return SetPosition( const ThreeVector& pos );

		/*! set the hit position */
		inline ThreeVector GetPosition() const
			{ return position; }

		/*! set the first threshold of sdhcal */
		Return SetThreshold( const HitThreshold &fThr );

		/*! set the first threshold of sdhcal */
		inline HitThreshold GetThreshold() const
			{ return fThreshold; }

		/*! set the hit tag */
		Return SetHitTag( const Tag &fTag );

		/*! return the hit tag */
		inline Tag GetHitTag() const
			{ return hitTag; }

		/*! set the hit weight */
		Return SetWeight( const int &w );

		/*! set the hit weight */
		inline int GetWeight() const
			{ return weight; }

		/*! return the I J K cell id */
		inline IntVector GetIJK() const
			{ return ijk; }


		Return SetIJK( int I , int J , int K );


		Return SetIJK( const IntVector &vec );

		inline int GetType()
			{ return type; }

		Return SetType( int t );

		inline double GetTime()
			{ return time; }

		Return SetTime( double t );


//		bool IsIsolatedFromHits( const HitCollection* hitCol );


	};

}

#endif  // HIT_HH
