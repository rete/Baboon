  /// \file Shower.hh
/*
 *
 * Shower.hh header template generated by fclass
 * Creation date : lun. avr. 29 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef SHOWER_HH
#define SHOWER_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>

#include "Objects/HitCompositeObject.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Globals.hh"
#include "Geometry/ThreeVector.hh"
#include "Geometry/Cone.hh"
#include "Objects/Track.hh"
#include "Objects/Core.hh"



namespace baboon {

//	typedef std::map<Hit*,double> HitToWeightsMap;

	/*
	 * Class Shower
	 */

	class Shower : public HitCompositeObject , public TypedObject {

		public:

			/*! Default Constructor */
			Shower();
			/*! Default Destructor */
			virtual ~Shower();

			/*!
			 *
			 *
			 *
			 */
			Return AddCaloHit( CaloHit *caloHit );

			/*!
			 *
			 *
			 *
			 */
			Return AddCaloHit( CaloHit *caloHit , const double &weight );

			/*!
			 *
			 *
			 *
			 */
			Return SetCaloHitWeight( CaloHit *caloHit , const double &weight );

			/*!
			 *
			 *
			 *
			 */
			Return RemoveCaloHit( CaloHit *caloHit );

			/*!
			 *
			 *
			 *
			 */
			Return SetStartingPoint( const ThreeVector &startingVec );




		protected:

			DoubleVector hitWeights;
			ThreeVector startingPoint;

		public:

			/*!
			 *
			 *
			 *
			 */
			inline const DoubleVector &GetHitWeights()
				{ return hitWeights; }

			/*!
			 *
			 *
			 *
			 */
			inline ThreeVector GetStartingPoint()
				{ return startingPoint; }

			/*!
			 *
			 *
			 *
			 */
			Return GetCaloHitWeight( CaloHit *caloHit , double &w );


	};  // class


	typedef std::vector<Shower*> ShowerCollection;


}  // namespace 

#endif  //  SHOWER_HH
