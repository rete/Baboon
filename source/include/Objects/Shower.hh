  /// \file Shower.hh
/*
 *
 * Shower.hh header template generated by fclass
 * Creation date : lun. avr. 29 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef SHOWER_HH
#define SHOWER_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>

#include "Objects/HitCollection.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Globals.hh"
#include "Geometry/ThreeVector.hh"
#include "Geometry/Cone.hh"
#include "Objects/Track.hh"
#include "Objects/Core.hh"



namespace baboon {

	typedef std::map<Hit*,double> HitToWeightsMap;

	/*
	 * Class Shower
	 */

	class Shower {

		public:

			/*! Default Constructor */
			Shower();
			/*! Default Destructor */
			virtual ~Shower();

			Return AddHit( Hit *hit );

			Return AddHit( Hit *hit , const double &weight );

			Return SetHitWeight( Hit *hit , const double &weight );

			Return RemoveHit( Hit *hit );

			bool Contains( Hit *hit );

			Return SetStartingPoint( const ThreeVector &startingVec );

			Return SetStartingCone( Cone *cone );

			Return SetThrust( Track *th );

			bool HasThrust();

			Return AddCore( Core *core );

			Return RemoveCore( Core *core );

			bool Contains( Core *core );

			Return AddTrack( Track *track );

			Return RemoveTrack( Track *track );

			bool Contains( Track *track );




		protected:

			HitToWeightsMap *hitToWeightsMap;
			CoreCollection *coreCollection;
			TrackCollection *trackCollection;
			ThreeVector startingPoint;
			Track *thrust;
			Cone *startingCone;


		public:

			inline HitToWeightsMap *GetHitToWeightsMap()
				{ return hitToWeightsMap; }

			inline ThreeVector GetStartingPoint()
				{ return startingPoint; }

			inline Cone *GetStartingCone()
				{ return startingCone; }

			inline int Size()
				{ return hitToWeightsMap->size(); }

			inline Track *GetThrust()
				{ return thrust; }

			inline CoreCollection *GetCoreCollection()
				{ return coreCollection; }

			inline TrackCollection *GetTrackCollection()
				{ return trackCollection; }


	};  // class


	typedef std::vector<Shower*> ShowerCollection;


}  // namespace 

#endif  //  SHOWER_HH
