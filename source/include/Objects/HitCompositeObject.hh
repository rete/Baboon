  /// \file HitCompositeObject.hh
/*
 *
 * HitCompositeObject.hh header template generated by fclass
 * Creation date : mar. juil. 9 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef HITCOMPOSITEOBJECT_HH
#define HITCOMPOSITEOBJECT_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector> 


#include "Objects/HitCollection.hh"
#include "Managers/HitManager.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Internal.hh"
#include "Utilities/Globals.hh"
#include "Objects/ObjectConnector.hh"

namespace baboon {


	class TypedObject {

	public:

		inline const std::string &GetType()
			{ return type; }

		static bool IsPossibleType( const std::string &type )
			{ return std::find( possibleTypes.begin() , possibleTypes.end() , type ) != possibleTypes.end(); }

	protected:

		TypedObject( const std::string &type ) {
			this->type = type;
			possibleTypes.push_back(type);
		}

		static StringVector possibleTypes;
		std::string type;

//		friend class HitCompositeObject;
	};


	/*!
	 *
	 * Class HitCompositeObject
	 *
	 */

	class HitCompositeObject {

		public:
			/*!
			 *
			 * Default Constructor
			 *
			 */
			HitCompositeObject();

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~HitCompositeObject();

			/*!
			 *
			 *
			 *
			 */
			virtual Return AddHit( Hit* hit );

			/*!
			 *
			 *
			 *
			 */
			virtual Return RemoveHit( Hit* hit );

			/*!
			 *
			 *
			 *
			 */
			virtual bool Contains( Hit* hit );

			/*!
			 *
			 *
			 *
			 */
			Return SetHitCollection( HitCollection *hitCol );

			/*!
			 *
			 *
			 *
			 */
			bool IsConnectedTo( HitCompositeObject *obj );

			/*!
			 *
			 *
			 *
			 */
			Return ConnectWith( HitCompositeObject *obj );

			/*!
			 *
			 *
			 *
			 */
			Return RemoveConnectionWith( HitCompositeObject *obj );

		protected:

			HitCollection *hitCollection;
			ObjectConnectorCollection *objectConnectors;

		public:

			inline unsigned int Size()
				{ return hitCollection->size(); }

			inline HitCollection *GetHitCollection()
				{ return hitCollection; }


	};  // class


	typedef std::vector<HitCompositeObject*> HitCompositeObjectCollection;

}  // namespace 

#endif  //  HITCOMPOSITEOBJECT_HH
