  /// \file HitCellHelper.hh
/*
 *
 * HitCellHelper.hh header template generated by fclass
 * Creation date : ven. juil. 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef CALOHITCELLHELPER_HH
#define CALOHITCELLHELPER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <map>

#include "Objects/CaloHit.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Internal.hh"
#include "Utilities/Globals.hh"


namespace baboon {

	/*
	 * Class CaloHitCellHelper
	 */

	class CaloHitCellHelper {

		public:

			/*!
			 *
			 * Default Constructor
			 *
			 */
			CaloHitCellHelper();

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~CaloHitCellHelper();

			/*!
			 *
			 *
			 *
			 */
			CaloHit *GetCaloHitAt( unsigned int I , unsigned int J , unsigned int K );

			/*!
			 *
			 *
			 *
			 */
			bool IsPadFired( unsigned int I , unsigned int J , unsigned int K );

			/*!
			 *
			 *
			 *
			 */
			Return AddCaloHit( CaloHit *caloHit );

			/*!
			 *
			 *
			 *
			 */
			Return RemoveCaloHit( CaloHit *caloHit );

			/*!
			 *
			 *
			 *
			 */
			void Clear();

		private:

			/*!
			 *
			 *
			 *
			 */
			unsigned long int IJKToKey( unsigned int I , unsigned int J , unsigned int K );

			/*!
			 *
			 *
			 *
			 */
			IntVector KeyToIJK( unsigned long int key );


			int jFactor;
			int kFactor;
			std::map< unsigned long int , CaloHit* > cellIDToHitMap;


	};  // class

}  // namespace 

#endif  //  HITCELLHELPER_HH
