/*
 *
 * AlgorithmManager.hh header template generated by fclass
 * Creation date : Thu Mar 14 22:21:50 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef ALGORITHMMANAGER_HH
#define ALGORITHMMANAGER_HH




#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <map>

// cfgparser includes
#include "CfgParser/Data.hh"
#include "CfgParser/CfgParser.hh"

// sdhcal includes
#include "Algorithm/AbstractAlgorithm.hh"
#include "Exception.hh"


namespace baboon {


	typedef std::map< std::string , AbstractAlgorithm* > AlgorithmMap;

	/*!
	 * Class AlgorithmManager.
	 */

	class AlgorithmManager {

		protected :

			/*! Default Constructor */
			AlgorithmManager();

			/*! Default Destructor. Not virtual because no inheritance */
			~AlgorithmManager();

			/*! Unique instance. Part of singleton pattern */
			static AlgorithmManager* instance;

			/*! Map for algorithm storage */
			AlgorithmMap algorithmMap;

			/*! Configuration file name where the parameters of the algorithms have to be taken */
			std::string cfgFileName;

			/*! Load the algorithm parameters from the cfg file */
			void LoadAlgorithms();

		public :

			/*! Only way to get an instance of this class. Part of the singleton patter */
			static AlgorithmManager* GetInstance();

			/*! Only way to delete the object. Part of the singleton pattern */
			static void Kill();

			/*! Register an algorithm. Throw an exception if the algorithm is already registered */
			void RegisterAlgorithm( AbstractAlgorithm* )
				throw ( AlgorithmException , Exception );

			/*! Return true if the lagorithm is registered. Useful to avoid exception while getting or registering an algorithm */
			bool AlgorithmIsRegistered(const std::string&);

			/*! Return an algorithm which have already been registered via RegisterAlgorithm() */
			AbstractAlgorithm* GetAlgorithm(const std::string&)
				throw ( AlgorithmException , Exception );

			/*! Set the cfg file name where the algorithm parameters are stored */
			inline void SetConfigFileName(const std::string& cfgfName)
				{ cfgFileName = cfgfName; }

			/*! Initialize the whole stuff. */
			void Initialize();


	};

}

#endif  // ALGORITHMMANAGER_HH
