/*
 *
 * ClusteringManager.hh header template generated by fclass
 * Creation date : Fri Mar 15 18:06:44 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef CLUSTERINGMANAGER_HH
#define CLUSTERINGMANAGER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>


#include "Objects/Cluster.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Internal.hh"
#include "Objects/CaloHit.hh"

namespace baboon {

	/*!
	 * Class ClusteringManager.
	 */

	class ClusteringManager {

	protected :

		/*! Default Constructor */
		ClusteringManager();

		/*! Default Destructor */
		virtual ~ClusteringManager();

		static ClusteringManager *instance;

		ClusterCollection *clusters3D;

		ClusterCollection *clusters2D;


	public :

		static ClusteringManager *GetInstance();


		static void Kill();


		inline ClusterCollection *GetCluster3D()
			{ return clusters3D; }


		inline ClusterCollection *GetCluster2D()
			{ return clusters2D; }


		Return AddCluster( Cluster *cluster );


		Return RemoveCluster( Cluster *cluster );


		Return ClearAllContent();


		bool ClusterContainsHit( Cluster *cluster , CaloHit *caloHit );


		Return MergeAndDeleteClusters( Cluster *clusterToEnlarge , Cluster *clusterToDelete );


		Cluster *GetClusterAt( ClusterType clusterType , unsigned int I , unsigned int J , unsigned int K );


		Cluster *GetClusterContainingCaloHit( ClusterType clusterType , CaloHit *caloHit );

	};

}

#endif  // CLUSTERINGMANAGER_HH
