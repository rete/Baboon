/*
 *
 * HitManager.hh header template generated by fclass
 * Creation date : Wed Mar 20 18:19:39 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef HITMANAGER_HH
#define HITMANAGER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>

// lcio includes
#include "EVENT/LCCollection.h"
#include "EVENT/CalorimeterHit.h"
#include "IMPL/CalorimeterHitImpl.h"


// sdhcal includes
#include "Objects/Hit.hh"
#include "Geometry/Matrix3D.hh"
#include "Config/SdhcalConfig.hh"



namespace sdhcal {

	/*!
	 * Class HitManager.
	 */

	class HitManager {

		protected :
			/*! Default Constructor */
			HitManager() ;
			/*! Default Destructor */
			virtual ~HitManager() ;

			static HitManager *instance;

			HitCollection *hitCollection;

			IntVec nbOfPadsXYZ;

			DoubleVec padsSize;

			DoubleVec interpadSize;

			double layerThickness;

			bool showerSpliterMode;

			Matrix3D<Hit*> hitMapVolumePtr;

			void BuildVolumeMap();

		public :

			static HitManager *GetInstance();

			static void Kill();

			void BeginOfEvent( EVENT::LCCollection* );

			void EndOfEvent();

			bool PadIsTouched( unsigned int I , unsigned int J , unsigned int K );

			inline HitCollection *GetHitCollection()
				{ return hitCollection; }

			Matrix3D<Hit*> GetHitCubeAt( unsigned int I, unsigned int J, unsigned int K, unsigned int size);

			EVENT::CalorimeterHitVec *GetCalorimeterHitCollection();

			Hit *GetHitAt( unsigned int I , unsigned int J , unsigned int K );

			DoubleVec PositionToIJK( const ThreeVector& v );

			static HitCollection *GetNewHitCollection( EVENT::LCCollection* lcCol );

			bool PadExists( int I , int J , int K );


	};

}

#endif  // HITMANAGER_HH
