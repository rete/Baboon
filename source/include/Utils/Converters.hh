/*
 *
 * Converters.hh header template generated by fclass
 * Creation date : Wed Mar  6 11:09:36 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef CONVERTERS_HH
#define CONVERTERS_HH

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cmath>
#include <stdexcept>
#include <sstream>

// sdhcal includes
#include "Geometry/ThreeVector.hh"

// lcio includes
#include "EVENT/CalorimeterHit.h"
#include "IMPL/CalorimeterHitImpl.h"
#include "EVENT/LCCollection.h"

namespace sdhcal {

	/*!
	 * Class Converter.
	 */

	class Converter {

	public :
		/*! Default Constructor */
		Converter();
		/*! Default Destructor */
		virtual ~Converter();

		static std::vector<double> ThreeVectorToStdVector(const ThreeVector& g4Vec);

		static std::vector<double> StdStringVectorToStdDoubleVector( const std::vector<std::string>& );

		static std::map<double,double> StdVectorsToStdMap( const std::vector<double>& ,const std::vector<double>& );

		static IMPL::CalorimeterHitImpl *CopyCalorimeterHitImpl(IMPL::CalorimeterHitImpl *hit);

	};


	template <class T>
	inline bool StringToType(const std::string &s, T &t) {

		std::istringstream iss(s);
		return !(iss >> t).fail();
	}


	template <class T>
	inline std::string TypeToString(const T &t) {

		std::ostringstream oss;

		if ((oss << t).fail())
		 throw;

		return oss.str();
	}

}

#endif  // CONVERTERS_HH
