  /// \file Detector.hh
/*
 *
 * Detector.hh header template generated by fclass
 * Creation date : mer. juin 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#ifndef DETECTOR_HH
#define DETECTOR_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>


//#include "Managers/DetectorManager.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Internal.hh"

// root includes
#include "TGeoVolume.h"

// gear includes
#include "gear/CalorimeterParameters.h"

namespace baboon {



	/*!
	 * @brief  Detector type enum
	 */
	enum DetectorType {
		kCalorimeter,
		kFTD,
		kTPC,
		kMuonChamber,
		kVertexDetector
	};

	/*!
	 * @brief  Detector class
	 */

	class Detector {

		public:

		   /*!
			*
			* Default Constructor
			*
			*/
			Detector( const std::string &detName , const DetectorType type  );

		   /*!
			*
			* Default Destructor
			*
			*/
			virtual ~Detector();

		protected:

			/*!
			 *
			 *
			 *
			 */
			virtual Return BuildGeometry( TGeoManager *goeManager , TGeoVolume *topVolume ) = 0;

			/*!
			 *
			 *
			 *
			 */
			virtual Return ReadSettings( const gear::GearParameters *parameters ) = 0;

			std::string detectorName;
			std::vector<TGeoVolume *> detectorVolumes;
			const DetectorType detectorType;
			bool isBuilt;

		public:

			/*!
			 *
			 *
			 *
			 */
			inline std::string GetName()
				{ return detectorName; }

			/*!
			 *
			 *
			 *
			 */
			inline const DetectorType GetDetectorType()
				{ return detectorType; }

			/*!
			 *
			 *
			 *
			 */
			inline bool IsBuilt()
				{ return isBuilt; }


		friend class DetectorManager;

};  // class 

	typedef std::vector<Detector*> DetectorCollection;

}  // namespace 

#endif  //  DETECTOR_HH
