/*
 *
 * Overlayer.hh header template generated by fclass
 * Creation date : Wed Mar 13 14:23:21 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef OVERLAYER_HH
#define OVERLAYER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>


// lcio includes
#include "IMPL/CalorimeterHitImpl.h"
#include "IMPL/LCCollectionVec.h"
#include "UTIL/CellIDDecoder.h"
#include "UTIL/CellIDEncoder.h"

// sdhcal includes
#include "Geometry/ThreeVector.hh"
#include "Config/SdhcalConfig.hh"


namespace sdhcal {

	/*!
	 * Class Overlayer.
	 */

	class Overlayer {

		protected :

			std::vector<int> nbOfPadsXYZ;

			int lostHits;

			std::string codingPattern;

			IMPL::LCCollectionVec* lcCollection1;

			IMPL::LCCollectionVec* lcCollection2;

			IMPL::LCCollectionVec* lcOverlaidCollection;

			ThreeVector *collectionTranslation1;

			ThreeVector *collectionTranslation2;

			void TranslateCollections();

			bool collectionsTranslated;

		public :
			/*! Default Constructor with two collections */
			Overlayer(IMPL::LCCollectionVec *lcCol1 , IMPL::LCCollectionVec *lcCol2) ;
			/*! Default Destructor */
			virtual ~Overlayer() ;
			/*! Overlay the two collection */
			void OverlayCollections();

			IMPL::LCCollectionVec* GetOverlaidCollection()
				{ return lcOverlaidCollection; }

			inline void SetTranslations(ThreeVector* trans1 , ThreeVector* trans2)
				{ collectionTranslation1 = trans1; //std::cout << "trans1 : " << *trans1 << std::endl;
				  collectionTranslation2 = trans2; //std::cout << "trans1 : " << *trans2 << std::endl;
				  }

			inline int GetNumberOfLostHits()
				{ return lostHits; }



	};

}

#endif  // OVERLAYER_HH
