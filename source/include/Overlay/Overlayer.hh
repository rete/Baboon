/*
 *
 * Overlayer.hh header template generated by fclass
 * Creation date : Wed Mar 13 14:23:21 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#ifndef OVERLAYER_HH
#define OVERLAYER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>

// baboon includes
#include "Geometry/ThreeVector.hh"
#include "Config/SdhcalConfig.hh"
#include "Objects/CaloHit.hh"
#include "Utilities/ReturnValues.hh"
#include "Utilities/Internal.hh"


namespace baboon {

	/*!
	 *
	 * Class Overlayer
	 *
	 */

	class Overlayer {

		protected :

			std::vector<int> nbOfPadsXYZ;
			int lostHits;
			CaloHitCollection* collection1;
			CaloHitCollection* collection2;
			CaloHitCollection* overlaidCollection;
			CaloHitCollection* lostHitCollection;
			ThreeVector *collectionTranslation1;
			ThreeVector *collectionTranslation2;
			std::vector<double> padsSize;
			std::vector<double> interpadSize;
			double layerThickness;
			bool collectionsTranslated;


			Return TranslateCollections();

			int ThresholdToInt( CaloHitThreshold fThr );

		public :

			/*!
			 *
			 * Default Constructor with two collections
			 *
			 */
			Overlayer( CaloHitCollection *col1 , CaloHitCollection *col2) ;

			/*!
			 *
			 * Default Destructor
			 *
			 */
			virtual ~Overlayer() ;

			/*!
			 *
			 * Overlay the two collection
			 *
			 */
			Return OverlayCollections();

			inline CaloHitCollection* GetOverlaidCollection()
				{ return overlaidCollection; }

			inline void SetTranslations( ThreeVector* trans1 , ThreeVector* trans2 ) {
				collectionTranslation1 = trans1;
				collectionTranslation2 = trans2;
			}

			inline int GetNumberOfLostHits()
				{ return lostHits; }

			inline CaloHitCollection *GetLostHitCollection()
				{ return lostHitCollection; }


	};

}

#endif  // OVERLAYER_HH
