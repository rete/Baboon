/*
 *
 * CoreFinderAlgorithm.cc cpp file template generated by fclass
 * Creation date : Mon Apr  8 17:46:03 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#include "Algorithm/Calorimetry/CoreFinderAlgorithm.hh"


using namespace std;

namespace baboon {


	CoreFinderAlgorithm::CoreFinderAlgorithm()
		: AbstractAlgorithm("CoreFinderAlgorithm") {
		caloHitCollection = 0;
		distance = 1;
		needData = true;
		calorimeter = 0;
		minimumThresholdConcentration = 0;
	}

	CoreFinderAlgorithm::~CoreFinderAlgorithm() {}


	Return CoreFinderAlgorithm::Init() {

		threshCountVec.clear();
		data.GetValue("minimumThresholdConcentration",&minimumThresholdConcentration);
		return BABOON_SUCCESS();
	}

	Return CoreFinderAlgorithm::CheckConsistency() {

		BABOON_CHECK_POINTER( calorimeter );

		if( minimumThresholdConcentration <= 0 )
			return BABOON_NOT_INITIALIZED("minimumThresholdConcentration bad init ( <= 0)");

		return BABOON_SUCCESS();
	}

	Return CoreFinderAlgorithm::Execute() {


		CaloHitCollection *caloHitCollection = calorimeter->GetCaloHitCollection();
		CoreManager *coreManager = CoreManager::GetInstance();

		for( unsigned int l=0 ; l<caloHitCollection->size() ; l++ ) {

			CaloHit *caloHit = caloHitCollection->at(l);
			IntVector ijk = caloHit->GetIJK();
			CaloHitThreshold thresh = caloHit->GetThreshold();


			int count = 0;

			for(int i=-1 ; i<=1 ; i++ ) {
				for(int j=-1 ; j<=1 ; j++) {
					for(int k=-1 ; k<=1 ; k++) {

						if( !calorimeter->IsPadFired( ijk.at(0)+i , ijk.at(1)+j , ijk.at(2)+k ) )
							continue;

						CaloHit* touchedHit = calorimeter->GetCaloHitAt( ijk.at(0)+i , ijk.at(1)+j , ijk.at(2)+k );

						int factor = 1;
						factor *= touchedHit->GetThreshold();
						count += factor;

					}
				}
			}
			caloHit->SetDensity( double(count) / 27.0 );

			if(count / 27.0 >= minimumThresholdConcentration )
				caloHit->SetTag( CoreTag() );

		}


		ClusterCollection *clustCol = new ClusterCollection();
		ClusteringAlgorithm* clusteringAlgo = new ClusteringAlgorithm();

		clusteringAlgo->SetClusteringMode( fClustering3D );
		clusteringAlgo->SetTaggingMode( fClusterTagMode );
		clusteringAlgo->AddHitTagToCluster( CoreTag() );
		clusteringAlgo->SetClusterCollection( clustCol );
		clusteringAlgo->SetCalorimeter( calorimeter );
		clusteringAlgo->Process();

		for( unsigned int i=0 ; i<clustCol->size() ; i++ ) {

			CaloHitCollection *caloHitCol = clustCol->at(i)->GetCaloHitCollection();
			Core *core = new Core();
			for( unsigned int j=0 ; j<caloHitCol->size() ; j++ ) {
				core->AddCaloHit( caloHitCol->at(j) );
			}
			core->SetBuildConcentration( minimumThresholdConcentration );
			BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , coreManager->AddCore( core ) );
		}
		clustCol->clear();

		delete clusteringAlgo;
		delete clustCol;

		return BABOON_SUCCESS();
	}

	Return CoreFinderAlgorithm::End() {

		return BABOON_SUCCESS();
	}

	Return CoreFinderAlgorithm::SetCalorimeter( Calorimeter *calo ) {

		BABOON_CHECK_POINTER( calo );
		calorimeter = calo;
		return BABOON_SUCCESS();
	}


}
