  /// \file WeightNormalizationAlgorithm.cc
/*
 *
 * WeightNormalizationAlgorithm.cc source template generated by fclass
 * Creation date : ven. juil. 19 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Algorithm/Calorimetry/WeightNormalizationAlgorithm.hh"

namespace baboon {

	WeightNormalizationAlgorithm::WeightNormalizationAlgorithm()
		: AbstractAlgorithm("WeightNormalizationAlgorithm") {

		needData = false;
	}


	WeightNormalizationAlgorithm::~WeightNormalizationAlgorithm() {

	}


	Return WeightNormalizationAlgorithm::Init() {

		return BABOON_SUCCESS();
	}


	Return WeightNormalizationAlgorithm::Execute() {

		ShowerCollection *showerCollection = ShowerManager::GetInstance()->GetShowerCollection();
		CaloHitCollection *caloHitCollection = new CaloHitCollection();

		// Get all the hits from all the showers
		for( unsigned int s=0 ; s<showerCollection->size() ; s++ ) {

			CaloHitCollection *caloHitCol = showerCollection->at(s)->GetCaloHitCollection();

			for( unsigned int h=0 ; h<caloHitCol->size() ; h++ ) {
				bool contains;
				BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , CaloHitHelper::CollectionContainsCaloHit( caloHitCollection , caloHitCol->at(h) , contains ) );

				if( !contains ) {
					caloHitCollection->push_back( caloHitCol->at(h) );
				}
			}
		}

		// if there's nothing, then nothing to normalize...
		if( showerCollection->empty() || caloHitCollection->empty() )
			return BABOON_SUCCESS();


		for( unsigned int h=0 ; h<caloHitCollection->size() ; h++ ) {

			CaloHit *caloHit = caloHitCollection->at(h);

			HitShowerWeightCollection hitShowerCollectionTemp;
			double totalWeight = 0;

			// Find all the weights in showers for a given hit
			for( unsigned int s=0 ; s<showerCollection->size() ; s++ ) {

				if( showerCollection->at(s)->Contains( caloHit ) ) {

					double weight = 0;
					BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , showerCollection->at(s)->GetCaloHitWeight( caloHit , weight ) );
					totalWeight += weight;
					HitShowerWeight *hsw = new HitShowerWeight();
					hsw->caloHit = caloHit;
					hsw->shower = showerCollection->at(s);
					hsw->weight = weight;
					hitShowerCollectionTemp.push_back( hsw );
				}
			}

			// If nothing has been found continue;
			if( hitShowerCollectionTemp.empty() )
				continue;

			// Loop over the showers that contains the given hit
			// and normalize the weights for all the showers
			for( unsigned int s=0 ; s<hitShowerCollectionTemp.size() ; s++ ) {

				Shower *shower = hitShowerCollectionTemp.at(s)->shower;
				BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , shower->SetCaloHitWeight( hitShowerCollectionTemp.at(s)->caloHit , hitShowerCollectionTemp.at(s)->weight / totalWeight ) );
				delete hitShowerCollectionTemp.at(s);
				hitShowerCollectionTemp.at(s) = 0;
			}
			hitShowerCollectionTemp.clear();
		}

		return BABOON_SUCCESS();
	}


	Return WeightNormalizationAlgorithm::End() {

		return BABOON_SUCCESS();
	}


	Return WeightNormalizationAlgorithm::CheckConsistency() {

		return BABOON_SUCCESS();
	}

}  // namespace 

