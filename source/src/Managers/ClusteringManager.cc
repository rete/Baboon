/*
 *
 * ClusteringManager.cc cpp file template generated by fclass
 * Creation date : Fri Mar 15 18:06:44 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. EtÃ©
 */


#include "Managers/ClusteringManager.hh"



using namespace std ;


namespace sdhcal {

	ClusteringManager *ClusteringManager::instance = NULL;

	ClusteringManager::ClusteringManager() {

		clusters3D = new ClusterCollection();
		clusters2D = new ClusterCollection();
	}

	ClusteringManager::~ClusteringManager() {

		delete clusters3D;
		delete clusters2D;
	}


	ClusteringManager *ClusteringManager::GetInstance() {
		if(instance == NULL) instance = new ClusteringManager;
		return instance;
	}

	void ClusteringManager::Kill() {
		if(instance != NULL) {
			delete instance;
			instance = NULL;
		}
	}


	ClusterCollection *ClusteringManager::GetCluster3D() {

		HitCollection *hitCollection = HitManager::GetInstance()->GetHitCollection();
		clusters3D->clear();
		for( unsigned int hitID=0 ; hitID<hitCollection->size() ; hitID++ ) {

			Cluster *cluster = hitCollection->at(hitID)->GetCluster3D();
			if( std::find( clusters3D->begin() , clusters3D->end() , cluster ) != clusters3D->end() ) continue;
			clusters3D->push_back( cluster );

		}

		return clusters3D;

	}

	ClusterCollection *ClusteringManager::GetCluster2D() {

		HitCollection *hitCollection = HitManager::GetInstance()->GetHitCollection();
		clusters2D->clear();
		for( unsigned int hitID=0 ; hitID<hitCollection->size() ; hitID++ ) {

			Cluster *cluster = hitCollection->at(hitID)->GetCluster2D();
			if( std::find( clusters2D->begin() , clusters2D->end() , cluster ) != clusters2D->end() ) continue;
			clusters2D->push_back( cluster );

		}

		return clusters2D;

	}


}
