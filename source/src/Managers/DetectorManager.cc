  /// \file DetectorManager.cc
/*
 *
 * DetectorManager.cc source template generated by fclass
 * Creation date : ven. juin 28 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Managers/DetectorManager.hh"

namespace baboon {


	DetectorManager *DetectorManager::instance = 0;


	DetectorManager::DetectorManager() {

		geoManager = 0;
		detectors = new DetectorCollection();
		geometryBuilt = false;
	}


	DetectorManager::~DetectorManager() {

		for( unsigned int d=0 ; d<detectors->size() ; d++ )
			if( detectors->at(d) != 0 )
				delete detectors->at(d);

		detectors->clear();
		delete detectors;
	}


	DetectorManager *DetectorManager::GetInstance() {

		if( instance == 0 )
			instance = new DetectorManager();
		return instance;
	}


	void DetectorManager::Kill() {

		if( instance != 0 ) {
			delete instance;
			instance = 0;
		}
	}


	Return DetectorManager::RegisterDetector( Detector *detector ) {

		if( detector == 0 )
			return BABOON_INVALID_PARAMETER("Assertion detector != 0 failed");

		if( DetectorIsRegistered( detector->GetName() ) )
			return BABOON_ALREADY_PRESENT("Detector '"+ detector->GetName() +"' already registered");

		detectors->push_back( detector );

		return BABOON_SUCCESS();
	}


	bool DetectorManager::DetectorIsRegistered( const std::string &detectorName ) {

		if( detectorName.empty() )
			BABOON_THROW_RESULT( BABOON_INVALID_PARAMETER("Assertion !detectorName.empty() failed") );

		for( unsigned int i=0 ; i<detectors->size() ; i++ ) {
			if( detectors->at(i)->GetName() == detectorName )
				return true;
		}
		return false;
	}


	Detector *DetectorManager::GetDetector( const std::string detectorName ) {

		for( unsigned int i=0 ; i<detectors->size() ; i++ ) {
			if( detectors->at(i)->GetName() == detectorName ) {
				return detectors->at(i);
			}
		}
		return 0;
	}


	Return DetectorManager::BuildGeometry( const gear::GearMgr *gearMgr ) {

		BABOON_CHECK_POINTER( gearMgr );

		if( detectors->empty() )
			return BABOON_NOT_INITIALIZED();

		if( geometryBuilt )
			return BABOON_ALREADY_INITIALIZED("Geometry is already built");

		geoManager = new TGeoManager("DetectorGeometry","detector geometry");

		TGeoMaterial *vacuumMaterial = new TGeoMaterial("Vacuum", 0, 0, 0); // dummy material
		TGeoMedium *vacuum = new TGeoMedium("Vacuum",1, vacuumMaterial);
		topVolume = geoManager->MakeBox("WorldVolume",vacuum,10000.0,10000.0,10000.0);

		geoManager->SetTopVolume( topVolume );

		try {

			for( unsigned int i=0 ; i<detectors->size() ; i++ ) {

				Detector *detector = detectors->at(i);

				if( detector->GetDetectorType() == kCalorimeter ) {

					Calorimeter *calorimeter = (Calorimeter *)detector;

					if( calorimeter->GetCalorimeterType() == kHcalEndcap ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getHcalEndcapParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kHcalBarrel ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getHcalBarrelParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kHcalRing ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getHcalRingParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kEcalBarrel ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getEcalBarrelParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kEcalEndcap ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getEcalEndcapParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kEcalPlug ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getEcalPlugParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kLcal ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getLcalParameters() ) );
					}
					else if( calorimeter->GetCalorimeterType() == kBeamCal ) {
						BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , calorimeter->ReadSettings( &gearMgr->getBeamCalParameters() ) );
					}
				}

				BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , detector->BuildGeometry( geoManager , topVolume ) );
			}
		}
		catch ( gear::Exception &e ) {

			std::cerr << "A gear error occured while building the geometry : " << e.what() << std::endl;
			return BABOON_ERROR("Couln't build geometry!");
		}

		geoManager->CloseGeometry();
		geometryBuilt = true;

		return BABOON_SUCCESS();
	}


	Return DetectorManager::Init( const gear::GearMgr *gearMgr ) {

		BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , this->BuildGeometry( gearMgr ) );

		return BABOON_SUCCESS();
	}

	StringVector DetectorManager::GetDetectorList() {

		StringVector detectorList;
		for( unsigned int d=0 ; d<detectors->size() ; d++ )
			detectorList.push_back( detectors->at(d)->GetName() );

		return detectorList;
	}


}  // namespace 

