/*
 *
 * AnalysisManager.cc cpp file template generated by fclass
 * Creation date : Mon Mar 18 21:07:41 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Et√©
 */


#include "Managers/AnalysisManager.hh"



using namespace std;



namespace baboon {



	AnalysisManager *AnalysisManager::instance = 0;



	AnalysisManager::AnalysisManager() {

		rootOutputFile = 0;
	}



	AnalysisManager::~AnalysisManager() {}


	AnalysisManager *AnalysisManager::GetInstance() {
		if(instance == NULL) instance = new AnalysisManager();
		return instance;
	}



	void AnalysisManager::Kill() {
		if(instance != NULL) {
			delete instance;
			instance = 0;
		}
	}


	Return AnalysisManager::Init() {

		if( !outputFileName.empty() ) {
			rootOutputFile = TFile::Open( outputFileName.c_str() ,"RECREATE" );
			cout << "ROOT output file '" << outputFileName << "' correctly opened" << endl;
		}
		return BABOON_SUCCESS();
	}

	void AnalysisManager::PrintAnalysisFooter() {

		TreeMap::iterator treeMapIt;

		cout << endl;
		cout << "***************************************************************************" << endl;
		cout << "* Analysis Manager terminated with the following Tree/Branch structure :" << endl;
		cout << "*" << endl;
		for( treeMapIt=m_treeMap.begin() ; treeMapIt!=m_treeMap.end() ; treeMapIt++ ) {
			cout << "*     T " << treeMapIt->first << " : " << endl;
			cout << "*" << endl;
			BranchMap *branchMap = treeMapIt->second.second;
			BranchMap::iterator branchMapIt;
			for( branchMapIt=branchMap->begin() ; branchMapIt!=branchMap->end() ; branchMapIt++ ) {
				cout << "*        B  " << branchMapIt->first << endl;
			}
			cout << "*"<< endl;
		}
		cout << "***************************************************************************" << endl;
		cout << endl;
	}


	Return AnalysisManager::End() {

		if( rootOutputFile ) {
			instance->PrintAnalysisFooter();
			rootOutputFile->cd();
			cout << "Writing in '" << outputFileName << "' root file..." << endl;
			rootOutputFile->Write();
			cout << "Closing root file..." << endl;
			rootOutputFile->Close();
			delete rootOutputFile;
		}
		return BABOON_SUCCESS();
	}


}
