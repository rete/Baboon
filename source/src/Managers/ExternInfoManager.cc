  /// \file ExternInfoManager.cc
/*
 *
 * ExternInfoManager.cc source template generated by fclass
 * Creation date : mer. fï¿½vr. 5 2014
 *
 * This file is part of XXX libraries.
 * 
 * XXX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * XXX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with XXX.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Remi Ete
 * @version
 * @copyright
 *
 *
 */


#include "Managers/ExternInfoManager.hh"

#include <algorithm>

namespace baboon {


	ExternInfoManager *ExternInfoManager::instance = 0;


	ExternInfoManager::ExternInfoManager()
	{

	}


	ExternInfoManager::~ExternInfoManager()
	{

		ClearAllContent();

	}


	ExternInfoManager *ExternInfoManager::GetInstance()
	{

		if( instance == 0 )
						instance = new ExternInfoManager();

		return instance;

	}


	void ExternInfoManager::Kill()
	{

		if( instance != 0 ) {
						delete instance;
						instance = 0;
		}

	}


	TrackInfo *ExternInfoManager::CreateTrackInfo()
	{

		TrackInfo *trackInfo = new TrackInfo();
		trackInfos.push_back( trackInfo );

		return trackInfo;

	}


	void ExternInfoManager::RemoveTrackInfo( TrackInfo *trackInfo )
	{

		std::vector< TrackInfo * >::iterator it = std::find( trackInfos.begin() , trackInfos.end() , trackInfo );

		delete (*it);
		trackInfos.erase( it );

	}


	const std::vector< TrackInfo * > &ExternInfoManager::GetTrackInfos() const
	{

		return trackInfos;

	}


	std::vector< TrackInfo * > &ExternInfoManager::GetTrackInfos()
	{

		return trackInfos;

	}


	void ExternInfoManager::ClearAllContent()
	{

		ClearTrackInfoContent();

	}


	void ExternInfoManager::ClearTrackInfoContent()
	{

		for( unsigned int tr=0 ; tr<trackInfos.size() ; tr++ )
			delete trackInfos.at( tr );

		trackInfos.clear();

	}

}  // namespace 

