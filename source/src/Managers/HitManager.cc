/*
 *
 * HitManager.cc cpp file template generated by fclass
 * Creation date : Wed Mar 20 18:19:39 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. EtÃ©
 */


#include "Managers/HitManager.hh"

using namespace std ;

namespace sdhcal {


	HitManager *HitManager::instance = NULL;

	HitManager::HitManager() {
		SdhcalConfig::GetInstance()->GetData("pads").GetValue("nbOfPadsXYZ",&nbOfPadsXYZ);  // vector 3 elts
		SdhcalConfig::GetInstance()->GetData("pads").GetValue("size",&padsSize);  // vector 2 elts
		SdhcalConfig::GetInstance()->GetData("pads").GetValue("interpadSize",&interpadSize);  // vector 2 elts
		SdhcalConfig::GetInstance()->GetData("layers").GetValue("thickness",&layerThickness);  // double
		hitCollection = NULL;
		showerSpliterMode = false;
	}


	HitManager::~HitManager() {}


	HitManager *HitManager::GetInstance() {
		if (instance == NULL) instance = new HitManager();
		return instance;
	}


	void HitManager::Kill() {

		if(instance != NULL) {
			delete instance;
			instance = NULL;
		}
	}


	void HitManager::BeginOfEvent( EVENT::LCCollection* lcCol) {

		if(hitCollection != NULL) delete hitCollection;
		hitCollection = new  HitCollection();

		for(int eltID=0 ; eltID<lcCol->getNumberOfElements() ; eltID++) {
			EVENT::CalorimeterHit *calHit = dynamic_cast<EVENT::CalorimeterHit*> (lcCol->getElementAt(eltID));
			Hit *hit = new Hit(calHit);
			hitCollection->push_back(hit);
		}

		instance->BuildVolumeMap();
	}


	void HitManager::BuildVolumeMap() {

		Hit **hitMapVolumePtrBuffer = new Hit*[ (nbOfPadsXYZ.at(0)+1) * (nbOfPadsXYZ.at(1)+1) * (nbOfPadsXYZ.at(2)+1)];
		hitMapVolumePtr.Initialize(hitMapVolumePtrBuffer,nbOfPadsXYZ.at(0)+1,nbOfPadsXYZ.at(1)+1,nbOfPadsXYZ.at(2)+1);

		for(unsigned int i=0 ; i<hitCollection->size() ; i++) {
			IntVec ijk = hitCollection->at(i)->GetIJK();
			hitMapVolumePtr.SetValue( ijk.at(0) , ijk.at(1) , ijk.at(2) , hitCollection->at(i) );
		}

	}


	void HitManager::EndOfEvent() {

		delete hitMapVolumePtr.GetPtr();
		hitCollection->clear();
		delete hitCollection;
		hitCollection = NULL;
	}


	bool HitManager::PadIsTouched( unsigned int I , unsigned int J , unsigned int K ) {

		if( hitMapVolumePtr.GetValue(I,J,K) == 0 ) return false;
		return true;
	}


	EVENT::CalorimeterHitVec *HitManager::GetCalorimeterHitCollection() {

		EVENT::CalorimeterHitVec *calHitCollection = new vector<EVENT::CalorimeterHit*>;

		for(int eltID=0 ; eltID<hitCollection->size() ; eltID++) {
			IMPL::CalorimeterHitImpl *calHitImpl = hitCollection->at(eltID)->ToCalorimeterHitImpl();
			calHitCollection->push_back( calHitImpl);
		}
		return calHitCollection;
	}



	Matrix3D<Hit*> HitManager::GetHitCubeAt( unsigned int I, unsigned int J, unsigned int K, unsigned int size) {

		Matrix3D<bool> retMat;
		bool *retMatBuffer = new bool[ (2*size+1) * (2*size+1) * (2*size+1) ];
		retMat.Initialize( retMatBuffer, 2*size+1 , 2*size+1 , 2*size+1 );

		for( int i=-size ; i<=size ; i++) {
			for( int j=-size ; j<=size ; j++) {
				for( int k=-size ; k<=size ; k++) {
					retMat.SetValue( i , j , k , hitMapVolumePtr.GetValue( I+i , J+j , K+k  ) );
				}
			}
		}
	}


	Hit *HitManager::GetHitAt( unsigned int I , unsigned int J , unsigned int K ) {
		return hitMapVolumePtr.GetValue( I , J , K );
	}


	DoubleVec HitManager::PositionToIJK( const ThreeVector& v ) {

		DoubleVec retVec;
		double I = (nbOfPadsXYZ.at(0)/2.0) + v.x()/(padsSize.at(0)+interpadSize.at(0)); retVec.push_back(I);
		double J = (nbOfPadsXYZ.at(1)/2.0) + v.y()/(padsSize.at(1)+interpadSize.at(1)); retVec.push_back(J);
		double K = (nbOfPadsXYZ.at(2)/2.0) + v.z()/layerThickness; retVec.push_back(K);
		return retVec;
	}


	bool HitManager::PadExists( int I , int J , int K ) {

		if( I <= nbOfPadsXYZ.at(0) && I > 0
		 && J <= nbOfPadsXYZ.at(1) && K > 0
		 && K <= nbOfPadsXYZ.at(2) && K > 0 )

			return true;

		return false;

	}


	HitCollection *HitManager::GetNewHitCollection( EVENT::LCCollection* lcCol ) {

		HitCollection *hitCol = new HitCollection();

		for(int eltID=0 ; eltID<lcCol->getNumberOfElements() ; eltID++) {
			EVENT::CalorimeterHit *calHit = dynamic_cast<EVENT::CalorimeterHit*> (lcCol->getElementAt(eltID));
			Hit *hit = new Hit(calHit);
			hitCol->push_back(hit);
		}
		return hitCol;

	}








}





