  /// \file CoreManager.cc
/*
 *
 * CoreManager.cc source template generated by fclass
 * Creation date : ven. mai 10 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Managers/CoreManager.hh"

using namespace std;

namespace baboon {


	CoreManager *CoreManager::instance = 0;

	CoreManager::CoreManager() {

		coreCollection = new CoreCollection();
	}

	CoreManager::~CoreManager() {

		delete coreCollection;
	}

	CoreManager *CoreManager::GetInstance() {

		if( instance == 0 )
			instance = new CoreManager();
		return instance;
	}

	void CoreManager::Kill() {

		if( instance != 0 ) {
			delete instance;
			instance = 0;
		}
	}

	Return CoreManager::AddCore( Core *core ) {

		if( core == 0 )
			return BABOON_INVALID_PARAMETER("While adding a core : assertion core != 0 failed");

		CoreCollection::iterator coreIt = std::find( coreCollection->begin() ,coreCollection->end() , core );
		if( coreIt != coreCollection->end() )
			return BABOON_ALREADY_PRESENT("Core already exists in core collection");
		else coreCollection->push_back( core );

		return BABOON_SUCCESS();
	}


	Return CoreManager::RemoveCore( Core *core ) {

		if( core == 0 )
			return BABOON_INVALID_PARAMETER("While removing a core : assertion core != 0 failed");

		CoreCollection::iterator coreIt = std::find( coreCollection->begin() ,coreCollection->end() , core );
		if( coreIt != coreCollection->end() ) {
			delete core;
			coreCollection->erase( coreIt );
		}
		else return BABOON_NOT_FOUND("While removing a core : core was not registered in the core collection");

		return BABOON_SUCCESS();
	}


	Return CoreManager::ClearAllContent() {

		if( coreCollection == 0 )
			return BABOON_INVALID_PARAMETER("While clearing all content in core manager : assertion coreCollection != 0 failed");

		for( unsigned int i=0 ; i<coreCollection->size() ; i++ ) {
			if( coreCollection->at(i) != 0 )
				delete coreCollection->at(i);
		}
		coreCollection->clear();

		return BABOON_SUCCESS("Content cleared in core manager");
	}


	bool CoreManager::CoreContainsHit( Core *core , CaloHit *caloHit ) {

		return core->Contains( caloHit );
	}


	Return CoreManager::FindCoreContainingHit( CaloHit *caloHit , Core *coreToFind ) {

		for( unsigned int c=0 ; c<coreCollection->size() ; c++ ) {

			if( coreCollection->at(c)->Contains( caloHit ) ) {
				coreToFind = coreCollection->at(c);
				return BABOON_SUCCESS("Core found");
			}
		}
		return BABOON_NOT_FOUND();
	}

}  // namespace 

