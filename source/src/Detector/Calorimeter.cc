  /// \file Calorimeter.cc
/*
 *
 * Calorimeter.cc source template generated by fclass
 * Creation date : mer. juin 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Detector/Calorimeter.hh"

namespace baboon {

	Calorimeter::Calorimeter( const CalorimeterType &calType )
		: Detector() {

		calorimeterType = calType;
		caloHitCollection = new CaloHitCollection();
	}



	Calorimeter::~Calorimeter() {

		for( unsigned int i=0 ; caloHitCollection->size() ; i++ )
			if( caloHitCollection->at(i) != 0 )
				delete caloHitCollection->at(i);

		caloHitCollection->clear();
		delete caloHitCollection;
	}



	Return Calorimeter::AddCaloHit( CaloHit *caloHit ) {

		if( caloHitCollection->empty() ) {
			caloHitCollection->push_back( caloHit );
			return BABOON_SUCCESS();
		}
		CaloHitCollection::iterator caloHitIt = std::find( caloHitCollection->begin() , caloHitCollection->end() , caloHit );

		if( caloHitIt == caloHitCollection->end() ) {
			caloHitCollection->push_back( caloHit );
			return BABOON_SUCCESS();
		}

		return BABOON_ALREADY_PRESENT("Calo hit already registered in the calorimeter");
	}



	Return Calorimeter::RemoveCaloHit( CaloHit *caloHit ) {

		if( caloHitCollection->empty() )
			return BABOON_INVALID_PARAMETER("Calo hit collection is empty!");

		CaloHitCollection::iterator caloHitIt = std::find( caloHitCollection->begin() , caloHitCollection->end() , caloHit );

		if( caloHitIt != caloHitCollection->end() ) {
			caloHitCollection->erase( caloHitIt );
			return BABOON_SUCCESS("Calo hit correctly removed");
		}

		return BABOON_NOT_FOUND("Calo hit was not registered in the calorimeter");
	}


}  // namespace 

