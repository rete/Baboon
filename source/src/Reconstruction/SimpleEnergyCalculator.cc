  /// \file SimpleEnergyCalculator.cc
/*
 *
 * SimpleEnergyCalculator.cc source template generated by fclass
 * Creation date : ven. mai 24 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Reconstruction/SimpleEnergyCalculator.hh"

using namespace std;

namespace baboon {

	SimpleEnergyCalculator::SimpleEnergyCalculator()
		: EnergyCalculator() {

		params = new double[9];
		params[0] = 0.0227148;
		params[1] = 4.77839e-05;
		params[2] = -4.05221e-08;
		params[3] = 0.112287;
		params[4] = 6.24094e-06;
		params[5] = 2.9642e-08;
		params[6] = 0.156503;
		params[7] = 0.00010774;
		params[8] = 4.97735e-08;

	}

	SimpleEnergyCalculator::~SimpleEnergyCalculator() {

		delete [] params;
	}


	Return SimpleEnergyCalculator::CalculateEnergy() {

		if( hitCollection == 0 )
			return BABOON_NOT_INITIALIZED("Can't compute energy without setting a hit collection before.");

		energy = 0;

		if( hitCollection->empty() )
			return BABOON_SUCCESS();

		unsigned int nbOfHits = hitCollection->size();

		double alpha = params[0] + params[1]*( nbOfHits ) + params[2]*( nbOfHits*nbOfHits );
		double beta = params[3] + params[4]*( nbOfHits ) + params[5]*( nbOfHits*nbOfHits );
		double gamma = params[6] + params[7]*( nbOfHits ) + params[8]*( nbOfHits*nbOfHits );

		int nbThreshold1 = 0;
		int nbThreshold2 = 0;
		int nbThreshold3 = 0;

		for( unsigned int i=0 ; i<nbOfHits ; i++ ) {

			Hit* hit = hitCollection->at(i);
			if( hit->GetThreshold() == fThreshold1 ) nbThreshold1++;
			else if( hit->GetThreshold() == fThreshold2 ) nbThreshold2++;
			else if( hit->GetThreshold() == fThreshold3 ) nbThreshold3++;
		}

		energy = alpha*nbThreshold1 + beta*nbThreshold2 + gamma*nbThreshold3;
		return BABOON_SUCCESS();
	}

	Return SimpleEnergyCalculator::SetParameter( const int &i , const double &value ) {

		if( i > 8 )
			BABOON_OUT_OF_RANGE("Out of range for params[i]");
		else params[i] = value;
		return BABOON_SUCCESS();

	}

}  // namespace 

