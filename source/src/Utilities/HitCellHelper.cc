  /// \file HitCellHelper.cc
/*
 *
 * HitCellHelper.cc source template generated by fclass
 * Creation date : ven. juil. 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Utilities/HitCellHelper.hh"

namespace baboon {

	HitCellHelper::HitCellHelper()
		: jFactor(100000),
		  kFactor(100000) {
	}

	HitCellHelper::~HitCellHelper() {

		cellIDToHitMap.clear();
	}


	Hit *HitCellHelper::GetHitAt( unsigned int I , unsigned int J , unsigned int K ) {

		long unsigned int key = this->IJKToKey( I , J , K );
		return cellIDToHitMap[ key ];
	}


	bool HitCellHelper::IsPadFired( unsigned int I , unsigned int J , unsigned int K ) {

		return ( this->GetHitAt( I , J , K ) != 0 );
	}


	long unsigned int HitCellHelper::IJKToKey( unsigned int I , unsigned int J , unsigned int K ) {

		return (kFactor*jFactor)*I + (kFactor)*J + K;
	}

	IntVector HitCellHelper::KeyToIJK( long unsigned int key ) {

		IntVector ijk(3,0);

		ijk.at(0) = ( key / (kFactor*jFactor) );
		ijk.at(1) = ( key % (kFactor*jFactor) / kFactor );
		ijk.at(2) = ( key % kFactor );

		return ijk;
	}



	Return HitCellHelper::AddHit( Hit *hit ) {

		if( hit == 0 )
			return BABOON_INVALID_PARAMETER("Assertion hit != 0 failed");

		IntVector ijk = hit->GetIJK();
		long unsigned int key = IJKToKey( ijk.at(0) , ijk.at(1) , ijk.at(2) );

		if( cellIDToHitMap[ key ] == 0 ) {

			cellIDToHitMap[ key ] = hit;
			return BABOON_SUCCESS();
		}
		else
			return BABOON_ALREADY_PRESENT("Hit was already present");
	}


	Return HitCellHelper::RemoveHit( Hit *hit ) {

		if( hit == 0 )
			return BABOON_INVALID_PARAMETER("Assertion hit != 0 failed");

		IntVector ijk = hit->GetIJK();
		long unsigned int key = IJKToKey( ijk.at(0) , ijk.at(1) , ijk.at(2) );

		if( cellIDToHitMap[ key ] == 0 ) {
			return BABOON_NOT_FOUND("Hit not found!");
		}
		else {
			cellIDToHitMap[ key ] = 0;
			return BABOON_SUCCESS();
		}
	}



	void HitCellHelper::Clear() {

		cellIDToHitMap.clear();
	}



}  // namespace 

