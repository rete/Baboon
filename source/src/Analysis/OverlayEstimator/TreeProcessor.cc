  /// \file TreeProcessor.cc
/*
 *
 * TreeProcessor.cc source template generated by fclass
 * Creation date : ven. mai 3 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Analysis/OverlayEstimator/TreeProcessor.hh"

namespace baboon {

	TreeProcessor::TreeProcessor( TTree *t ) {
		treeWrapper = new InputTTreeWrapper(t);
	}

	TreeProcessor::~TreeProcessor() {
		delete treeWrapper;
	}


	void TreeProcessor::Loop() {

		TH1 *purity1Histo = new TH1D("purity1Histo","",100,0,100);
		TH1 *purity2Histo = new TH1D("purity2Histo","",100,0,100);
		TH1 *contamination1Histo = new TH1D("contamination1Histo","",100,0,100);
		TH1 *contamination2Histo = new TH1D("contamination2Histo","",100,0,100);

		int nbOfEntries = treeWrapper->GetNbOfEntries();

		for ( int jentry=0 ; jentry<nbOfEntries; jentry++ ) {

			EstimatorVars tempVars;
			treeWrapper->LoadEntry(jentry);
			bool showersFound;
			treeWrapper->GetValue("showersFound",showersFound);

			if( !showersFound ) continue;

			treeWrapper->GetValue("contamination1",tempVars.contamination1);
			treeWrapper->GetValue("contamination2",tempVars.contamination2);
			treeWrapper->GetValue("purity1",tempVars.purity1);
			treeWrapper->GetValue("purity2",tempVars.purity2);

			estimatorMeans.algorithmEfficiency++;
			purity1Histo->Fill(tempVars.purity1*100);
			purity2Histo->Fill(tempVars.purity2*100);
			contamination1Histo->Fill(tempVars.contamination1*100);
			contamination2Histo->Fill(tempVars.contamination2*100);

		}
		estimatorMeans.algorithmEfficiency /= double(nbOfEntries);
		estimatorMeans.contamination1 = contamination1Histo->GetMean();
		estimatorMeans.contamination2 = contamination2Histo->GetMean();
		estimatorMeans.purity1 = purity1Histo->GetMean();
		estimatorMeans.purity2 = purity2Histo->GetMean();

		delete purity1Histo;
		delete purity2Histo;
		delete contamination1Histo;
		delete contamination2Histo;

	}


}  // namespace 

