  /// \file TestBeamCutsProcessor.cc
/*
 *
 * TestBeamCutsProcessor.cc source template generated by fclass
 * Creation date : lun. mai 27 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "MarlinProcessor/TestBeamCutsProcessor.hh"

using namespace std;
using namespace baboon;
using namespace EVENT;

TestBeamCutsProcessor::TestBeamCutsProcessor()
	: BaboonProcessor("TestBeamCutsProcessor") {

	  _description = "TestBeamCutsProcessor to apply some basic cuts after test beams. Cut electrons and muons, keep only pions";

}

TestBeamCutsProcessor::~TestBeamCutsProcessor() {


}



Return TestBeamCutsProcessor::Init() {

	// Add the Hough Transform Algorithm for track reconstruction within the sdhcal
	algorithmManager->RegisterAlgorithm( new HoughTransformAlgorithm() );

	// Add clustering (2D) algorithm
	algorithmManager->RegisterAlgorithm( new ClusteringAlgorithm() );

	return BABOON_SUCCESS();

}


Return TestBeamCutsProcessor::ProcessRunHeader( LCRunHeader* run ) {

	return BABOON_SUCCESS();
}


Return TestBeamCutsProcessor::ProcessEvent( const unsigned int &evtNb ) {

	cout << "event " << evtNb <<  endl;

	HitCollection *hitCollection = hitManager->GetHitCollection();

	analysisManager->Set("Variables","Nhit",int(hitCollection->size()));
	analysisManager->Fill("Variables");

	return BABOON_SUCCESS();
}


Return TestBeamCutsProcessor::Check( LCEvent *evt ) {

	return BABOON_SUCCESS();
}

Return TestBeamCutsProcessor::End() {

	return BABOON_SUCCESS();
}


