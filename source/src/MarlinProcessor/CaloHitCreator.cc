  /// \file CaloHitCreator.cc
/*
 *
 * CaloHitCreator.cc source template generated by fclass
 * Creation date : jeu. mai 9 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "MarlinProcessor/CaloHitCreator.hh"


using namespace std;
using namespace EVENT;

namespace baboon {

	CaloHitCreator::CaloHitCreator() {

		collectionName = "HCALBarrel";
		decoderString = "M:3,S-1:3,I:9,J:9,K-1:6";
	}

	CaloHitCreator::~CaloHitCreator() {
	}

	Return CaloHitCreator::CreateCaloHits( LCEvent *evt ) {


		try {

			LCCollection *collection = evt->getCollection( collectionName );
			UTIL::CellIDDecoder<CalorimeterHit>::setDefaultEncoding( decoderString );
			UTIL::CellIDDecoder<CalorimeterHit> cellIdDecoder( collection );

			for( unsigned int i=0 ; i<collection->getNumberOfElements() ; i++ ) {

				if( collection->getTypeName() != "CalorimeterHit" )
					BABOON_THROW_RESULT( BABOON_INVALID_PARAMETER("Collection name must be a CalorimeterHit collection") );
				CalorimeterHit *caloHit = static_cast<CalorimeterHit*> ( collection->getElementAt(i) );
				HitParameters hitParams;
				if( caloHit->getEnergy() == 1.0 ) hitParams.threshold = fThreshold1;
				else if( caloHit->getEnergy() == 2.0 ) hitParams.threshold = fThreshold2;
				else if( caloHit->getEnergy() == 3.0 ) hitParams.threshold = fThreshold3;
				else
					return BABOON_INVALID_PARAMETER("Energy of SDHCAL hit is not in threshold unit (1,2,3)");
				ThreeVector position;
				position.setX( caloHit->getPosition()[0] );
				position.setY( caloHit->getPosition()[1] );
				position.setZ( caloHit->getPosition()[2] );
				hitParams.position = position;
				int I = cellIdDecoder(caloHit)["I"];
				int J = cellIdDecoder(caloHit)["J"];
				int K = cellIdDecoder(caloHit)["K-1"];
				IntVector ijk;
				ijk.push_back( I );
				ijk.push_back( J );
				ijk.push_back( K );
				hitParams.type = caloHit->getType();
				hitParams.time = caloHit->getTime();
				hitParams.ijk = ijk;

				BABOON_THROW_RESULT_IF( BABOON_SUCCESS() , != , HitManager::GetInstance()->RegisterNewHit( hitParams ) );
			}
		}
		catch ( DataNotAvailableException &e ) {

			return BABOON_ERROR( "LCIO exception thrown : " + string(e.what()) );
		}
		catch ( Exception &e ) {

			return BABOON_ERROR( "Failed to create hit. " + string(e.what()) );
		}

		return BABOON_SUCCESS();
	}



}  // namespace



