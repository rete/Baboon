  /// \file GShowerSplitterProcessor.cc
/*
 *
 * GShowerSplitterProcessor.cc source template generated by fclass
 * Creation date : lun. mai 20 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "MarlinProcessor/GShowerSplitterProcessor.hh"

using namespace std;
using namespace baboon;
using namespace EVENT;

GShowerSplitterProcessor aGraphicalProc;

GShowerSplitterProcessor::GShowerSplitterProcessor()
	: GraphicalProcessor("GShowerSplitterProcessor") {

	  _description = "ShowerSplitterProcessor for shower splitting in SDHCAL";

	  // register steering parameters: name, description, class-variable, default value

	  registerProcessorParameter( "BABOON_HOME" ,
				      "Path to Baboon directory install",
				      baboonHome,
				      string("/home/remi/ilcsoft/SDHCAL/Baboon") );

	  string cfgFileName = string("/home/remi/ilcsoft/SDHCAL/Baboon/config/SDHCAL.cfg");
	  registerProcessorParameter("SDHCAL_cfg" ,
				     "SDHCAL configurations" ,
				     configFileName,
				     cfgFileName);

	  string algoFileName = string("/home/remi/ilcsoft/SDHCAL/Baboon/config/Algorithm.cfg");
	  registerProcessorParameter("Algorithm_cfg" ,
				     "Algorithm configurations" ,
				     algorithmFileName,
				     algoFileName);

	  registerProcessorParameter("rootOutputFile" ,
				     "root outputfile" ,
				     rootOutputFile,
				     string("ShowerSplitter.root"));

	  registerProcessorParameter("decoderString" ,
				     "decoder string for cell ID decoder" ,
				     decoderString,
				     string("M:3,S-1:3,I:9,J:9,K-1:6"));

	  registerProcessorParameter("collectionName" ,
				     "collection name for SDHCAL hits" ,
				     collectionName,
				     string("HCALBarrel"));

}

GShowerSplitterProcessor::~GShowerSplitterProcessor() {

}


Return GShowerSplitterProcessor::Init() {



}

Return GShowerSplitterProcessor::ProcessRunHeader( LCRunHeader* run  ) {

	return S_OK();

}

Return GShowerSplitterProcessor::ProcessEvent() {

	cout << "hit collection size : " << hitManager->GetHitCollection()->size() << endl;

	return S_OK();
}

Return GShowerSplitterProcessor::Check( LCEvent * evt ) {

	return S_OK();
}

Return GShowerSplitterProcessor::End() {

	return S_OK();
}
