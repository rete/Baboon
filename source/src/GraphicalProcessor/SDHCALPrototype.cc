  /// \file SDHCALPrototype.cc
/*
 *
 * SDHCALPrototype.cc source template generated by fclass
 * Creation date : dim. mai 19 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "GraphicalProcessor/SDHCALPrototype.hh"

using namespace std;

namespace baboon {

	SDHCALPrototype* SDHCALPrototype::instance = 0;

	SDHCALPrototype::SDHCALPrototype() {

		geometryAlreadyBuilt = false;

	}

	SDHCALPrototype::~SDHCALPrototype() {

	}

	SDHCALPrototype *SDHCALPrototype::GetInstance() {

		if( instance == 0 )
			instance = new SDHCALPrototype();
		return instance;
	}

	void SDHCALPrototype::Kill() {

		if( instance != 0 ) {
			delete instance;
			instance = 0;
		}
	}


	void SDHCALPrototype::BuildCalorimeter() {

//		config = SdhcalConfig::GetInstance();
//		IntVector nbOfPadsXYZ;
//		config->GetData("pads").GetValue("nbOfPadsXYZ",&nbOfPadsXYZ);
//		TGeoVolume **hitMapVolumePtrBuffer = new TGeoVolume*[ (nbOfPadsXYZ.at(0)+1) * (nbOfPadsXYZ.at(1)+1) * (nbOfPadsXYZ.at(2)+1)];
//		hitMapVolumePtr.Initialize(hitMapVolumePtrBuffer,nbOfPadsXYZ.at(0)+1,nbOfPadsXYZ.at(1)+1,nbOfPadsXYZ.at(2)+1);

	}

	Return SDHCALPrototype::BuildGeometry() {

		if( !geometryAlreadyBuilt ) {

			geoManager = new TGeoManager("SDHCALPrototype","SDHCAL prototype geometry");

			// Create the world volume
			TGeoMaterial *vacMat = new TGeoMaterial("Vacuum",0,0,0);
			TGeoMedium *vacMed = new TGeoMedium("Vacuum",1,vacMat);
			TGeoVolume *top = geoManager->MakeBox("world",vacMed,500,500,500);
			geoManager->SetTopVolume(top);
			geoManager->SetTopVisible(0);

			// Grab the basic config of the sdhcal
			config = SdhcalConfig::GetInstance();
			IntVector nbOfPadsXYZ;
			config->GetData("pads").GetValue("nbOfPadsXYZ",&nbOfPadsXYZ);

			ostringstream ss;

			for( int i=1 ; i<=nbOfPadsXYZ.at(0) ; i++ ) {
				for( int j=1 ; j<=nbOfPadsXYZ.at(1) ; j++ ) {
					for( int k=1 ; k<=nbOfPadsXYZ.at(2) ; k++ ) {

						string padID = IjkToString(i,j,k);
						TGeoVolume *currentCaloPad = geoManager->MakeBox( padID.c_str() , vacMed ,0.4,0.4,0.4);
						volumeToHitMap[ currentCaloPad ] = 0;
						currentCaloPad->SetLineColor( kWhite );
						currentCaloPad->SetLineWidth( 2 );
						currentCaloPad->SetTransparency( 95 );
						top->AddNode( currentCaloPad , 1 , new TGeoTranslation( i-0.5 , j-0.5 , k-0.5 ) );
						ss.str("");
					}
				}
			}
			geometryAlreadyBuilt = true;
			geoManager->CloseGeometry();
			geoManager->SetVisLevel(4);
			return S_OK();
		}

		return S_ERROR( "ERROR : Try to build again the geometry" );
	}


	string SDHCALPrototype::IjkToString( unsigned int I , unsigned int J , unsigned int K ) {

		ostringstream ss;
		ss << "pad_" << I << "_" << J <<"_" << K ;
		return ss.str();
	}

	IntVector SDHCALPrototype::StringToIJK( const string &ijkString ) {

		IntVector ijk;
		string s;
		char motif = '_';
		for (unsigned int i=0 ; i<ijkString.size() ; i++)
		{
			if( ijkString[i] != motif ) {
				s.push_back(ijkString[i]);
			}
			else {
				ijk.push_back( atoi( s.c_str() ) );
				s = "";
			}
			if( i == ijkString.size()-1 )
				ijk.push_back( atoi( s.c_str() ) );
		}
		ijk.erase( ijk.begin() );
		return ijk;
	}


	void SDHCALPrototype::LoadHitCollection( HitCollection *hitCol ) {

//		geoManager = new TGeoManager("SDHCALPrototype","SDHCAL prototype geometry");

		// Create the world volume
//		TGeoMaterial *vacMat = new TGeoMaterial("Vacuum",0,0,0);
//		TGeoMedium *vacMed = new TGeoMedium("Vacuum",1,vacMat);
//		TGeoVolume *top = geoManager->MakeBox("world",vacMed,500,500,500);
//		geoManager->SetTopVolume(top);
//		geoManager->SetTopVisible(0);

		for( unsigned int i=0 ; i<hitCol->size() ; i++ ) {

			Hit *hit = hitCol->at(i);
			IntVector ijk = hit->GetIJK();
			string ijkString = IjkToString( ijk.at(0) , ijk.at(1) , ijk.at(2) );
			cout << ijkString << endl;
			TGeoVolume *vol = geoManager->GetVolume( ijkString.c_str() );
			volumeToHitMap[ vol ] = hit;
			if( hit->GetThreshold() == fThreshold1 ) vol->SetLineColor( kGreen );
			else if( hit->GetThreshold() == fThreshold2 ) vol->SetLineColor( kBlue );
			else if( hit->GetThreshold() == fThreshold3 ) vol->SetLineColor( kRed );
			vol->SetVisibility(1);
		}
	}

	void SDHCALPrototype::ClearCalorimeter() {

		map<TGeoVolume*,Hit*>::iterator it;
		for( it=volumeToHitMap.begin() ; it!=volumeToHitMap.end() ; it++ ) {

			it->first->SetLineColor( kWhite );
			it->first->SetLineWidth( 2 );
			it->first->SetTransparency( 95 );
			it->second = 0;
		}

		delete geoManager;
	}


}  // namespace 

