  /// \file Shower.cc
/*
 *
 * Shower.cc source template generated by fclass
 * Creation date : lun. avr. 29 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Objects/Shower.hh"

namespace baboon {

	Shower::Shower()
		: TypedObject("Shower") {
//		hitWeights = new DoubleVector;

	}


	Shower::~Shower() {

		hitWeights.clear();
//		delete hitWeights;
	}


	Return Shower::AddCaloHit( CaloHit *caloHit , const double &weight ) {

		BABOON_CHECK_POINTER( caloHit );

		if( hitWeights.empty() ) {

			caloHitCollection->push_back( caloHit );
			hitWeights.push_back( weight );
			return BABOON_SUCCESS();
		}

		if( this->Contains( caloHit ) )
			return BABOON_ALREADY_PRESENT("Hit is already in the collection");
		else {

			caloHitCollection->push_back( caloHit );
			hitWeights.push_back( weight );
			return BABOON_SUCCESS();
		}
	}



	Return Shower::AddCaloHit( CaloHit *caloHit ) {

		return AddCaloHit( caloHit , 1.0 );
	}


	Return Shower::SetCaloHitWeight( CaloHit *caloHit , const double &weight ) {

		BABOON_CHECK_POINTER( caloHit );

		if( hitWeights.empty() )
			return BABOON_NOT_INITIALIZED("Hit weight is empty. Could not set a weight");


		for( unsigned int h=0 ; h<caloHitCollection->size() ; h++ ) {

			if( caloHitCollection->at(h) == caloHit ) {
				hitWeights.at(h) = weight;
				return BABOON_SUCCESS();
			}
		}
		return BABOON_NOT_FOUND("Hit not found!");
	}

	Return Shower::RemoveCaloHit( CaloHit *caloHit ) {

		if( caloHitCollection->empty() )
			return BABOON_NOT_FOUND("Try to remove a hit from an empty hit collection.");

		for( unsigned int h=0 ; h<caloHitCollection->size() ; h++ ) {
			if( caloHitCollection->at(h) == caloHit ) {

				caloHitCollection->erase( caloHitCollection->begin() + h );
				hitWeights.erase( hitWeights.begin() + h );
				return BABOON_SUCCESS();
			}
		}
		return BABOON_NOT_FOUND("Hit was not in the collection.");
	}

	Return Shower::SetStartingPoint( const ThreeVector &startingVec ) {

		startingPoint = startingVec;
		return BABOON_SUCCESS();
	}


	Return Shower::GetCaloHitWeight( CaloHit *caloHit , double &w ) {

		BABOON_CHECK_POINTER( caloHit );

		CaloHitCollection::iterator it = std::find( caloHitCollection->begin() , caloHitCollection->end() , caloHit );

		if( it == caloHitCollection->end() )
			return BABOON_NOT_FOUND("Hit doesn't belong to this shower!");

		w = hitWeights.at( std::distance( caloHitCollection->begin() , it ) );

		return BABOON_SUCCESS();
	}

}  // namespace 

