  /// \file Shower.cc
/*
 *
 * Shower.cc source template generated by fclass
 * Creation date : lun. avr. 29 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Objects/Shower.hh"

namespace baboon {

	Shower::Shower()
		: TypedObject("Shower") {
		hitWeights = new DoubleVector;
//		startingCone = 0;
//		thrust = 0;
//		coreCollection = new CoreCollection();
//		trackCollection = new TrackCollection();
	}


	Shower::~Shower() {

		hitWeights->clear();
		delete hitWeights;
//		delete hitToWeightsMap;
//		coreCollection->clear();
//		delete coreCollection;
//		trackCollection->clear();
//		delete trackCollection;
	}


	Return Shower::AddHit( Hit *hit , const double &weight ) {

		if( hit == 0 )
			return BABOON_INVALID_PARAMETER("Assertion hit != 0 failed.");

		if( hitWeights->empty() ) {

			hitCollection->push_back( hit );
			hitWeights->push_back( weight );
			return BABOON_SUCCESS();
		}

		if( this->Contains( hit ) )
			return BABOON_ALREADY_PRESENT("Hit is already in the collection");
		else {

			hitCollection->push_back( hit );
			hitWeights->push_back( weight );
			return BABOON_SUCCESS();
		}
	}



	Return Shower::AddHit( Hit *hit ) {

		return AddHit( hit , 1.0 );
	}


	Return Shower::SetHitWeight( Hit *hit , const double &weight ) {

		if( hit == 0 )
			return BABOON_INVALID_PARAMETER("Assertion hit != 0 failed.");

		if( hitWeights->empty() )
			return BABOON_NOT_INITIALIZED("Hit weight is empty. Could not set a weight");


		for( unsigned int h=0 ; h<hitCollection->size() ; h++ ) {

			if( hitCollection->at(h) == hit ) {
				hitWeights->at(h) = weight;
				return BABOON_SUCCESS();
			}
		}
		return BABOON_NOT_FOUND("Hit not found!");
	}

	Return Shower::RemoveHit( Hit *hit ) {

		if( hitCollection->empty() )
			return BABOON_NOT_FOUND("Try to remove a hit from an empty hit collection.");

		for( unsigned int h=0 ; h<hitCollection->size() ; h++ ) {
			if( hitCollection->at(h) == hit ) {

				hitCollection->erase( hitCollection->begin() + h );
				hitWeights->erase( hitWeights->begin() + h );
				return BABOON_SUCCESS();
			}
		}
		return BABOON_NOT_FOUND("Hit was not in the collection.");
	}

	Return Shower::SetStartingPoint( const ThreeVector &startingVec ) {

		startingPoint = startingVec;
		return BABOON_SUCCESS();
	}


	Return Shower::GetHitWeight( Hit *hit , double &w ) {

		BABOON_CHECK_POINTER( hit );

		HitCollection::iterator it = std::find( hitCollection->begin() , hitCollection->end() , hit );

		if( it == hitCollection->end() )
			return BABOON_NOT_FOUND("Hit doesn't belong to this shower!");

		w = hitWeights->at( std::distance( hitCollection->begin() , it ) );

		return BABOON_SUCCESS();
	}

}  // namespace 

