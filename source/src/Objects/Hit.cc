/*
 *
 * Hit.cc cpp file template generated by fclass
 * Creation date : Wed Mar  6 17:01:13 2013
 * Copyright (c) CNRS / IPNL
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. EtÃ©
 */


#include "Objects/Hit.hh"
#include "Objects/Cluster.hh"

using namespace std ;

namespace baboon {

	Hit::Hit() {

		hitTag = fUndefined;
	}

	Return Hit::SetPosition( const ThreeVector& pos ) {

		position = pos;
		return S_OK();
	}


	Return Hit::SetThreshold( const HitThreshold &fThr ) {

		fThreshold = fThr;
		return S_OK();
	}


	Return Hit::SetHitTag( const Tag &fTag ) {

		hitTag = fTag;
		return S_OK();
	}


	Return Hit::SetWeight( const int &w ) {

		weight = w;
		return S_OK();
	}


	Return Hit::SetIJK( int I , int J , int K ) {

		ijk.clear();
		ijk.push_back(I);
		ijk.push_back(J);
		ijk.push_back(K);
		return S_OK();
	}


	Return Hit::SetIJK( const IntVector &vec ) {

		ijk = vec;
		return S_OK();
	}


//	Hit::Hit(EVENT::CalorimeterHit* hit) {
//
//		SdhcalConfig::GetInstance()->GetData("general").GetValue("codingPattern",&codingPattern);
//		hitTag = fUndefined;
//		if(hit == NULL) cout << "hit pointer null" << endl;
//	    _cellID0 = hit->getCellID0();
//	    _cellID1 = hit->getCellID1();
//	    _energy = hit->getEnergy();
//	    _energyError = hit->getEnergyError();
//	    _time = hit->getTime();
//	    position = ThreeVector( hit->getPosition()[0] , hit->getPosition()[1] , hit->getPosition()[2] );
//	    _type = hit->getType();
////	    _rawHit = hit->getRawHit()->clone();
//	    hitTag = fUndefined;
//	    if(_energy == 2.0) fThreshold = fThreshold1;
//	    if(_energy == 1.0) fThreshold = fThreshold2;
//	    if(_energy == 3.0) fThreshold = fThreshold3;
//
//	}

	Hit::~Hit() {}


//	bool Hit::IsIsolatedFromHits( const HitCollection* hitCol ) {
//
//		unsigned int isolCond = 3;
//
//		for(unsigned int i=0 ; i<hitCol->size() ; i++) {
//
//			Hit *hit1 = hitCol->at(i);
//
//			unsigned int inc = 0;
//			while (inc != isolCond ) {
//
//
//
//				inc++;
//			}
//
//		}
//
//
//	}


//	void Hit::SetCluster3D( Cluster *cl ) {
//		cluster3D = cl;
//	}
//
//	void Hit::SetCluster2D( Cluster *cl ) {
//		cluster2D = cl;
//	}
//
//	void Hit::MergeClusters3D( Hit *hit ) {
//
//		HitCollection *hitCol = hit->GetCluster3D()->GetHitCollection();
//
//		for( unsigned int i=0 ; i<hitCol->size() ; i++ ) {
//			cluster3D->AddHit(hitCol->at(i));
//		}
//		if( cluster3D != hitCol->at(0)->GetCluster3D() ) {
//			delete hitCol->at(0)->GetCluster3D();
//			for( unsigned int i=0 ; i<hitCol->size() ; i++ ) hitCol->at(i)->SetCluster3D(cluster3D);
//		}
//
//	}
//
//	void Hit::MergeClusters2D( Hit *hit ) {
//
//		HitCollection *hitCol = hit->GetCluster2D()->GetHitCollection();
//
//		for( unsigned int i=0 ; i<hitCol->size() ; i++ ) {
//			cluster2D->AddHit(hitCol->at(i));
//		}
//		if( cluster2D != hitCol->at(0)->GetCluster2D() ) {
//			delete hitCol->at(0)->GetCluster2D();
//			for( unsigned int i=0 ; i<hitCol->size() ; i++ ) hitCol->at(i)->SetCluster2D(cluster2D);
//		}
//
//	}


}

