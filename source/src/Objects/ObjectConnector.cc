  /// \file ObjectConnector.cc
/*
 *
 * ObjectConnector.cc source template generated by fclass
 * Creation date : mar. juil. 9 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Objects/ObjectConnector.hh"


using namespace std;


namespace baboon {


	ObjectConnector::ObjectConnector() {

		connector = new Connector;
		connector->first = 0;
		connector->second = 0;
	}

	ObjectConnector::~ObjectConnector() {

		connector->first = 0;
		connector->second = 0;
		delete connector;
	}


	Return ObjectConnector::SetFirst( HitCompositeObject *obj ) {

		if( obj == 0 )
			return BABOON_INVALID_PARAMETER("Assertion obj != 0 failed");

		connector->first = obj;

		return BABOON_SUCCESS();
	}


	Return ObjectConnector::SetSecond( HitCompositeObject *obj ) {

		if( obj == 0 )
			return BABOON_INVALID_PARAMETER("Assertion obj != 0 failed");

		connector->second = obj;

		return BABOON_SUCCESS();
	}


	Return ObjectConnector::Connect( HitCompositeObject *first , HitCompositeObject *second ) {

		if( first == 0 )
			return BABOON_INVALID_PARAMETER("Assertion first != 0 failed");

		if( second == 0 )
			return BABOON_INVALID_PARAMETER("Assertion second != 0 failed");

		connector->first = first;
		connector->second = second;

		return BABOON_SUCCESS();
	}


	bool ObjectConnector::IsConnectionComplete() {

		if( connector->first == 0 || connector->second == 0 )
			return false;
		return true;
	}


	HitCompositeObject *ObjectConnector::GetFirst() {

		return connector->first;
	}


	HitCompositeObject *ObjectConnector::GetSecond() {

		return connector->second;
	}


}  // namespace 

