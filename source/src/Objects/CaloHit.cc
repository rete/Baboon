  /// \file CaloHit.cc
/*
 *
 * CaloHit.cc source template generated by fclass
 * Creation date : mer. juin 12 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "Objects/CaloHit.hh"

namespace baboon {

	CaloHit::CaloHit( const CaloHitType &caloType )
		: type( caloType )
		,time(0.0)
		,weight(0)
		,threshold( fCaloHitThr1 )
		,energy(0.0)
		,color(kWhite)
		,density(0) {

		ijk = IntVector(3,0);
		tag = UndefinedTag();
	}

	CaloHit::~CaloHit() {

	}


	Return CaloHit::SetPosition( const ThreeVector &pos ) {

		position = pos;
		return BABOON_SUCCESS();
	}


	Return CaloHit::SetTime( const double &t ) {

		if( t < 0 )
			return BABOON_INVALID_PARAMETER("Time < 0");
		time  = t;
		return BABOON_SUCCESS();
	}


	Return CaloHit::SetTag( const BaseTag &t ) {

		tag.CopyTag( t );
		return BABOON_SUCCESS();
	}


	Return CaloHit::SetWeight( const double &w ) {

		if( w < 0 )
			return BABOON_INVALID_PARAMETER("Weight < 0");
		weight = w;
		return BABOON_SUCCESS();
	}


	Return CaloHit::SetEnergy( const double &e ) {

		if( e < 0 )
			return BABOON_INVALID_PARAMETER("Energy < 0");
		energy = e;
		return BABOON_SUCCESS();
	}

	Return CaloHit::SetThreshold( const CaloHitThreshold &fThr ) {

		threshold = fThr;
		return BABOON_SUCCESS();
	}

	Return CaloHit::SetIJK( const unsigned int &I , const unsigned int &J , const unsigned int &K ) {

		ijk.at(0) = I;
		ijk.at(1) = J;
		ijk.at(2) = K;
		return BABOON_SUCCESS();
	}

	Return CaloHit::SetTypeID( const int &id ) {

		typeID = id;
		return BABOON_SUCCESS();
	}

	Return CaloHit::SetColor( const int &c ) {

		color = c;
		return BABOON_SUCCESS();
	}

	Return CaloHit::SetDensity( const double &d ) {

	 	density = d;
		return BABOON_SUCCESS();
	}

	bool CaloHit::SortByLayer( CaloHit *caloHit1 , CaloHit *caloHit2 ) {

		if( caloHit2->GetIJK().at(2) > caloHit1->GetIJK().at(2) )
			return true;
		else return false;
	}

}  // namespace 

