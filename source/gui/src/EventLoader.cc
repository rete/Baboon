  /// \file EventLoader.cc
/*
 *
 * EventLoader.cc source template generated by fclass
 * Creation date : dim. mai 5 2013
 * Copyright (c) CNRS , IPNL
 *
 * All Right Reserved.
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * @author : rete
 */


#include "EventLoader.hh"

using namespace std;

namespace baboon {

	EventLoader::EventLoader() {
		currentLCEvent = 0;

	}

	EventLoader::~EventLoader() {

	}


	Return EventLoader::LoadEvent( EVENT::LCEvent *event , const string &collectionName  ) {

		HitManager *hitManager = HitManager::GetInstance();
		EVENT::LCCollection *lcCollection = 0;

		try {
			lcCollection = event->getCollection("HCALBarrel");  //  hard coded for the moment
		} catch ( EVENT::DataNotAvailableException& e ) {
			currentLCEvent = 0;
			cerr << e.what() << endl;
			string message = string("Event was not loaded. Collection name ") + collectionName + string("doesn't exists!");
			return BABOON_ERROR( "Event was not loaded. Collection name doesn't exists!" );
		}
		currentLCEvent = event;
		CaloHitCreator *creator = new CaloHitCreator();
//		creator->SetDecoderString( "M:3,S-1:3,I:9,J:9,K-1:6" );
		creator->SetCollectionName( "HCALBarrel" );
		creator->CreateCaloHits( event );
//		hitManager->BeginOfEvent( lcCollection );
		this->LoadHitCollection( hitManager->GetHitCollection() );
		return BABOON_SUCCESS();
	}

	Return EventLoader::LoadHitCollection( HitCollection *hitCol ) {

		if( !caloHitBoxes.empty() ) this->ClearCaloHitBoxes();

		for( unsigned int i=0 ; i<hitCol->size() ; i++ ) {

			Hit *hit = hitCol->at(i);
			TEveBox* calorimeterHitBox = new TEveBox();
			caloHitBoxes[ hit ] = calorimeterHitBox;

			if( hit->GetThreshold() == fThreshold3 )
				calorimeterHitBox->SetMainColor( kRed );
			else if( hit->GetThreshold() == fThreshold2 )
				calorimeterHitBox->SetMainColor( kBlue );
			else if( hit->GetThreshold() == fThreshold1 )
				calorimeterHitBox->SetMainColor( kGreen );

			calorimeterHitBox->SetMainTransparency( 0 );

			IntVector ijk = hit->GetIJK();
			double boxSizeFactor = 3.0 / 8.0;

			calorimeterHitBox->SetVertex(0, ijk.at(0) - boxSizeFactor , ijk.at(1) - boxSizeFactor , ijk.at(2) - boxSizeFactor );
			calorimeterHitBox->SetVertex(1, ijk.at(0) + boxSizeFactor , ijk.at(1) - boxSizeFactor , ijk.at(2) - boxSizeFactor );
			calorimeterHitBox->SetVertex(2, ijk.at(0) + boxSizeFactor , ijk.at(1) + boxSizeFactor , ijk.at(2) - boxSizeFactor );
			calorimeterHitBox->SetVertex(3, ijk.at(0) - boxSizeFactor , ijk.at(1) + boxSizeFactor , ijk.at(2) - boxSizeFactor );
			calorimeterHitBox->SetVertex(4, ijk.at(0) - boxSizeFactor , ijk.at(1) - boxSizeFactor , ijk.at(2) + boxSizeFactor );
			calorimeterHitBox->SetVertex(5, ijk.at(0) + boxSizeFactor , ijk.at(1) - boxSizeFactor , ijk.at(2) + boxSizeFactor );
			calorimeterHitBox->SetVertex(6, ijk.at(0) + boxSizeFactor , ijk.at(1) + boxSizeFactor , ijk.at(2) + boxSizeFactor );
			calorimeterHitBox->SetVertex(7, ijk.at(0) - boxSizeFactor , ijk.at(1) + boxSizeFactor , ijk.at(2) + boxSizeFactor );

			gEve->AddElement( calorimeterHitBox );
		}

		return BABOON_SUCCESS();
	}

	Return EventLoader::ClearCaloHitBoxes() {

		map< Hit* , TEveBox* >::iterator it;
		for( it=caloHitBoxes.begin() ; it!=caloHitBoxes.end() ; it++ ) {
			delete it->second;
		}
		HitManager::GetInstance()->ClearAllContent();
		return BABOON_SUCCESS();
	}

}  // namespace 

